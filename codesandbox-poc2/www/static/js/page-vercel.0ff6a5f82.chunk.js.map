{"version":3,"sources":["webpack:///./src/app/pages/PreviewAuth/index.tsx","webpack:///./src/app/pages/VercelAuth/index.js"],"names":["withRouter","props","useOvermind","state","genericPageMounted","actions","effects","React","useState","error","setError","useEffect","hasLogIn","match","params","id","split","port","api","getSandbox","then","sandbox","sandboxUrl","frameUrl","Number","parseInt","undefined","trustedDomain","URL","origin","window","addEventListener","listener","e","data","$type","source","postMessage","previewSecret","removeEventListener","style","height","horizontal","vertical","to","signInPageUrl","location","pathname","VercelSignIn","redirect","setRedirect","jwt","document","search","code","opener","type","protocolAndHost","href","newSandboxUrl","setTimeout","signInUrl"],"mappings":"giBAgFeA,uBA9DK,SAACC,GAAgD,IAAD,EAK9DC,cAHFC,EAFgE,EAEhEA,MACWC,EAHqD,EAGhEC,QAAWD,mBACXE,EAJgE,EAIhEA,QAJgE,EAOxCC,IAAMC,WAPkC,WAO3DC,EAP2D,KAOpDC,EAPoD,KAkDlE,OAzCAC,qBAAU,WACRP,MACC,CAACA,IAEJO,qBAAU,WACR,GAAIR,EAAMS,SAAU,CAClBF,EAAS,MADS,MAGCT,EAAMY,MAAMC,OAAOC,GAAGC,MAAM,KAH7B,WAGXD,EAHW,KAGPE,EAHO,KAKlBX,EAAQY,IACLC,WAAWJ,GACXK,MAAK,SAAAC,GACJ,IAAMC,EAAaC,mBAASF,EAAS,GAAI,CACvCJ,KAAMA,EAAOO,OAAOC,SAASR,EAAM,SAAMS,IAGrCC,EAAgB,IAAIC,IAAIN,GAAYO,OAgB1CC,OAAOC,iBAAiB,WAdP,SAAXC,EAAYC,GACZA,EAAEC,MAAyB,2BAAjBD,EAAEC,KAAKC,QAClBF,EAAEG,OAAuBC,YACxB,CACEF,MAAO,iBACPG,cAAejB,EAAQiB,eAEzBX,GAGFG,OAAOS,oBAAoB,UAAWP,UAnB9C,OAyBS,SAAAC,GACLvB,EAAS,sCAGd,CAACJ,EAAQY,IAAKjB,EAAMY,MAAMC,OAAOC,GAAIZ,EAAMS,WAEvCT,EAAMS,SACX,kBAAC,IAAD,CAAY4B,MAAO,CAAEC,OAAQ,UAC3B,kBAAC,IAAD,CAAUC,YAAU,EAACC,UAAQ,GAC3B,kBAAC,IAAD,KAAQlC,EAAQ,UAAYA,EAAQ,sBAIxC,kBAAC,IAAD,CAAUmC,GAAIC,wBAAcC,SAASC,gB,sVCT1BC,UAzDM,WAAO,IAAD,EACOxC,mBAAS,MADhB,WAClByC,EADkB,KACRC,EADQ,OAEX1C,mBAAS,MAAhB2C,EAFkB,cAGC3C,mBAAS,MAHV,WAGlBC,EAHkB,KAGXC,EAHW,KAKzBC,qBAAU,WACR,GAAIyC,SAASN,SAASO,OAAOxC,MAAM,eAAgB,OAE/BuC,SAASN,SAASO,OAAOxC,MAAM,eAFA,WAEvCyC,GAFuC,WAGjD,OAAIxB,OAAOyB,YACLzB,OAAOyB,OAAOT,SAASjB,SAAWC,OAAOgB,SAASjB,QACpDC,OAAOyB,OAAOlB,YACZ,CACEmB,KAAM,SACNtB,KAAM,CACJoB,SAGJG,mCAKNP,EAAY,KAKdxC,EAAS,yBACR,IAqBH,OACE,kBAAC,IAAD,CAAUgC,YAAU,EAACC,UAAQ,GAC3B,kBAAC,IAAD,KApBEM,GACFG,SAASN,SAASY,KAAOC,0BAClB,+BAELlD,EACI,0CAAN,OAAiDA,GAE/C0C,EAAY,gBACL,MAAPA,GACFS,YAAW,WACTR,SAASN,SAASY,KAAOG,wBACxB,KACI,kCAGF","file":"static/js/page-vercel.0ff6a5f82.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useOvermind } from 'app/overmind';\nimport { Redirect, RouteComponentProps, withRouter } from 'react-router-dom';\nimport Centered from '@codesandbox/common/lib/components/flex/Centered';\nimport Fullscreen from '@codesandbox/common/lib/components/flex/Fullscreen';\n\nimport {\n  signInPageUrl,\n  frameUrl,\n} from '@codesandbox/common/lib/utils/url-generator';\n\nimport { Title } from 'app/components/Title';\n\n// This route is supposed to be opened in a new window.\n// It is called from a sandbox so that we can try to retrieve\n// a sandbox from the root domain and return the preview secret.\n// This is purely used to auth a sandbox. It should return a postMessage\n// with the previewSecret to the parent\nconst PreviewAuth = (props: RouteComponentProps<{ id: string }>) => {\n  const {\n    state,\n    actions: { genericPageMounted },\n    effects,\n  } = useOvermind();\n\n  const [error, setError] = React.useState<string>();\n\n  useEffect(() => {\n    genericPageMounted();\n  }, [genericPageMounted]);\n\n  useEffect(() => {\n    if (state.hasLogIn) {\n      setError(null);\n      // eslint-disable-next-line\n      const [id, port] = props.match.params.id.split('-');\n\n      effects.api\n        .getSandbox(id)\n        .then(sandbox => {\n          const sandboxUrl = frameUrl(sandbox, '', {\n            port: port ? Number.parseInt(port, 10) : undefined,\n          });\n          // Only send domains to urls from this sandbox\n          const trustedDomain = new URL(sandboxUrl).origin;\n\n          const listener = (e: MessageEvent) => {\n            if (e.data && e.data.$type === 'request-preview-secret') {\n              (e.source as WindowProxy).postMessage(\n                {\n                  $type: 'preview-secret',\n                  previewSecret: sandbox.previewSecret,\n                },\n                trustedDomain\n              );\n\n              window.removeEventListener('message', listener);\n            }\n          };\n\n          window.addEventListener('message', listener);\n        })\n        .catch(e => {\n          setError(\"We couldn't find the sandbox\");\n        });\n    }\n  }, [effects.api, props.match.params.id, state.hasLogIn]);\n\n  return state.hasLogIn ? (\n    <Fullscreen style={{ height: '100vh' }}>\n      <Centered horizontal vertical>\n        <Title>{error ? 'Error: ' + error : 'Fetching Sandbox'}</Title>\n      </Centered>\n    </Fullscreen>\n  ) : (\n    <Redirect to={signInPageUrl(location.pathname)} />\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default withRouter(PreviewAuth);\n","import React, { useEffect, useState } from 'react';\nimport Centered from '@codesandbox/common/lib/components/flex/Centered';\nimport {\n  protocolAndHost,\n  signInUrl,\n  newSandboxUrl,\n} from '@codesandbox/common/lib/utils/url-generator';\nimport { Title } from 'app/components/Title';\n\nconst VercelSignIn = () => {\n  const [redirect, setRedirect] = useState(null);\n  const [jwt] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (document.location.search.match(/\\?code=(.*)/)) {\n      // eslint-disable-next-line\n      const [_, code] = document.location.search.match(/\\?code=(.*)/);\n      if (window.opener) {\n        if (window.opener.location.origin === window.location.origin) {\n          window.opener.postMessage(\n            {\n              type: 'signin',\n              data: {\n                code,\n              },\n            },\n            protocolAndHost()\n          );\n        }\n        return;\n      }\n      setRedirect('/');\n\n      return;\n    }\n\n    setError('no message received');\n  }, []);\n\n  const getMessage = () => {\n    if (redirect) {\n      document.location.href = newSandboxUrl();\n      return 'Redirecting to sandbox page';\n    }\n    if (error) {\n      return `Something went wrong while signing in: ${error}`;\n    }\n    if (jwt) return 'Signing in...';\n    if (jwt == null) {\n      setTimeout(() => {\n        document.location.href = signInUrl();\n      }, 2000);\n      return 'Redirecting to sign in page...';\n    }\n\n    return 'Hey';\n  };\n\n  return (\n    <Centered horizontal vertical>\n      <Title>{getMessage()}</Title>\n    </Centered>\n  );\n};\n\nexport default VercelSignIn;\n"],"sourceRoot":""}
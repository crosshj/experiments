{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/postcss/loader.ts","webpack:///./src/sandbox/eval/utils/is-dependency-path.ts"],"names":["resolveCSSFile","loaderContext","path","basePath","a","isDependencyPath","resolveTranspiledModuleAsync","join","pkgJson","parsedPkg","JSON","parse","module","code","style","fullPath","charAt","Promise","resolve","reject","plugins","postcssImportPlugin","id","root","result","load","filename","tModule","options","to","from","map","inline","annotation","postcss","process","undefined","then","messages","forEach","m","type","addDependency","file","toJSON","transpiledCode","css","sourceMap","err","p","test"],"mappings":"qgBAOeA,E,0EAAf,WACEC,EACAC,EACAC,GAHF,qBAAAC,EAAA,0DAKuBC,YAAiBH,GALxC,0CAU4BD,EAAcK,6BAClCC,eAAKL,EAAM,iBAXnB,UAUYM,EAVZ,SAaYC,EAAYC,KAAKC,MAAMH,EAAQI,OAAOC,OAE9BC,MAfpB,wBAgBcC,EAAWR,eAAKL,EAAMO,EAAUK,OAhB9C,kBAkBeb,EAAcK,6BAA6BS,IAlB1D,2FAwBWd,EAAcK,6BAA6BJ,IAxBtD,eA2BQa,EAA8B,MAAnBb,EAAKc,OAAO,GAAad,EAAOK,eAAKJ,EAAUD,GA3BlE,kBA4BSD,EAAcK,6BAA6BS,IA5BpD,2D,sBA+Be,mBACbF,EACAZ,GAEA,OAAO,IAAIgB,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAU,CACdC,IAAoB,CAClBH,QAAQ,WAAD,oBAAE,WAAOI,EAAYC,GAAnB,eAAAnB,EAAA,+EAEgBJ,EAAeC,EAAeqB,EAAIC,GAFlD,cAECC,EAFD,yBAIEA,EAAOZ,OAAOV,MAJhB,yDAME,MANF,yDAAF,qDAAC,GASRuB,KAAK,WAAD,oBAAE,WAAOC,GAAP,eAAAtB,EAAA,sEACkBH,EAAcK,6BAClCoB,GAFE,cACEC,EADF,yBAKGA,EAAQf,OAAOC,MALlB,2CAAF,mDAAC,MAUHe,EAA0B,CAC9BC,GAAI5B,EAAcC,KAClB4B,KAAM7B,EAAcC,KACpB6B,IAAK,CACHC,QAAQ,EACRC,YAAY,IAIhB,OACEC,IAAQd,GAELe,QAAiB,OAATtB,OAAgBuB,EAAYvB,EAAMe,GAC1CS,MAAK,SAAAb,GACAA,EAAOc,UACQd,EAAOc,SACfC,SAAQ,SAAAC,GACA,eAAXA,EAAEC,MACJxC,EAAcyC,cAAcF,EAAEG,SAKpC,IAAMZ,EAAMP,EAAOO,KAAOP,EAAOO,IAAIa,SAGrC,OAFA1B,EAAQ,CAAE2B,eAAgBrB,EAAOsB,IAAKC,UAAWhB,IAE1C,QAhBX,OAkBS,SAAAiB,GAAG,OAAI7B,EAAO6B,W,8EC5F7B,kCAAO,IAAM3C,EAAmB,SAAC4C,GAAD,MAAe,eAAeC,KAAKD,K","file":"static/js/postcss-compiler.e4f7e02e2.chunk.js","sourcesContent":["import postcss, { ProcessOptions } from 'postcss';\nimport postcssImportPlugin from 'postcss-import';\nimport { join } from 'path';\nimport { isDependencyPath } from 'sandbox/eval/utils/is-dependency-path';\n\nimport TranspiledModule, { LoaderContext } from '../../transpiled-module';\n\nasync function resolveCSSFile(\n  loaderContext: LoaderContext,\n  path: string,\n  basePath: string\n): Promise<TranspiledModule> {\n  const isDependency = isDependencyPath(path);\n\n  if (isDependency) {\n    // First try to resolve the package.json, in case it has a style field\n    try {\n      const pkgJson = await loaderContext.resolveTranspiledModuleAsync(\n        join(path, 'package.json')\n      );\n      const parsedPkg = JSON.parse(pkgJson.module.code);\n\n      if (parsedPkg.style) {\n        const fullPath = join(path, parsedPkg.style);\n\n        return loaderContext.resolveTranspiledModuleAsync(fullPath);\n      }\n    } catch (e) {\n      /* Move to step 2 */\n    }\n\n    return loaderContext.resolveTranspiledModuleAsync(path);\n  }\n\n  const fullPath = path.charAt(0) === '/' ? path : join(basePath, path);\n  return loaderContext.resolveTranspiledModuleAsync(fullPath);\n}\n\nexport default function(\n  code: string,\n  loaderContext: LoaderContext\n): Promise<{ transpiledCode: string; sourceMap: any }> {\n  return new Promise((resolve, reject) => {\n    const plugins = [\n      postcssImportPlugin({\n        resolve: async (id: string, root: string) => {\n          try {\n            const result = await resolveCSSFile(loaderContext, id, root);\n\n            return result.module.path;\n          } catch (e) {\n            return null;\n          }\n        },\n        load: async (filename: string) => {\n          const tModule = await loaderContext.resolveTranspiledModuleAsync(\n            filename\n          );\n\n          return tModule.module.code;\n        },\n      }),\n    ];\n\n    const options: ProcessOptions = {\n      to: loaderContext.path,\n      from: loaderContext.path,\n      map: {\n        inline: true,\n        annotation: true,\n      },\n    };\n\n    return (\n      postcss(plugins)\n        // Explcitly give undefined if code is null, otherwise postcss crashses\n        .process(code === null ? undefined : code, options)\n        .then(result => {\n          if (result.messages) {\n            const messages = result.messages as any[];\n            messages.forEach(m => {\n              if (m.type === 'dependency') {\n                loaderContext.addDependency(m.file);\n              }\n            });\n          }\n\n          const map = result.map && result.map.toJSON();\n          resolve({ transpiledCode: result.css, sourceMap: map });\n\n          return null; // silence bluebird warning\n        })\n        .catch(err => reject(err))\n    );\n  });\n}\n","export const isDependencyPath = (p: string) => /^(\\w|@\\w|@-)/.test(p);\n"],"sourceRoot":""}
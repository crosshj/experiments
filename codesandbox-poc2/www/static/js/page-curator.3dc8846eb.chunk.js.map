{"version":3,"sources":["webpack:///./src/app/pages/Curator/elements.ts","webpack:///./src/app/pages/Curator/SandboxCard/elements.ts","webpack:///./src/app/pages/Curator/SandboxCard/index.tsx","webpack:///./src/app/pages/Curator/index.tsx"],"names":["Heading","styled","Title","Container","div","Buttons","section","PickerWrapper","DelayedAnimation","DelayedAnimationBase","fadeIn","props","theme","background","SandboxImageContainer","SandboxImage","SandboxInfo","SandboxTitle","ImageMessage","Avatar","img","Details","footer","FlexCenter","Pick","Button","SandboxCard","author","description","git","id","picks","pickSandbox","screenshotUrl","template","title","viewCount","useState","screenShotURL","setScreenShotURL","screenShotTimeout","useRef","hasScreenshot","useCallback","getTemplate","isServer","requestScreenshot","checkScreenShot","current","setTimeout","useEffect","clearTimeout","openSandbox","url","sandboxUrl","alias","window","open","getImageMessage","openUser","username","profileUrl","templateInfo","style","backgroundColor","borderRadius","padding","outline","onClick","role","tabIndex","backgroundImage","color","bottom","height","left","position","top","width","flex","alt","src","avatarUrl","name","marginRight","href","repo","rel","target","small","length","Curator","useOvermind","actions","explore","pickSandboxModal","popularSandboxesMounted","popularSandboxes","state","selectedDate","setSelectedDate","showPicker","setShowPicker","fetchPopularSandboxes","date","getTime","subWeeks","Date","handleDayClick","Navigation","horizontal","vertical","SubTitle","subMonths","show","format","onDayClick","selectedDays","sandboxes","map","sandbox","key"],"mappings":"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","file":"static/js/page-curator.3dc8846eb.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nimport { DelayedAnimation as DelayedAnimationBase } from 'app/components/DelayedAnimation';\nimport { Title } from 'app/components/Title';\n\nexport const Heading = styled(Title)`\n  margin-top: 3rem;\n`;\n\nexport const Container = styled.div`\n  height: 100%;\n  width: 100%;\n  margin: 1rem;\n  display: grid;\n  grid-template-columns: repeat(3, minmax(100px, 1fr));\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n`;\n\nexport const Buttons = styled.section`\n  display: flex;\n  justify-content: flex-end;\n  margin: 3rem 0;\n  align-items: center;\n  position: relative;\n\n  button:first-child {\n    margin-left: 1rem;\n  }\n\n  button:not(:last-child) {\n    margin-right: 1rem;\n  }\n`;\n\nexport const PickerWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n  background: #1c2022;\n  border-radius: 3px;\n  top: 45px;\n  right: 14px;\n`;\n\nexport const DelayedAnimation = styled(DelayedAnimationBase)`\n  color: rgba(255, 255, 255, 0.5);\n  font-weight: 600;\n  margin-top: 2rem;\n  text-align: center;\n`;\n","// @ts-check\nimport styled from 'styled-components';\nimport fadeIn from '@codesandbox/common/lib/utils/animation/fade-in';\nimport { Button } from '@codesandbox/common/lib/components/Button';\n\nexport const PADDING = 32;\n\nexport const Container = styled.div`\n  ${fadeIn(0)};\n  background-color: ${props => props.theme.background};\n  overflow: hidden;\n  border-radius: 2px;\n  user-select: none;\n\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n`;\n\nexport const SandboxImageContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  height: 160px;\n\n  background-color: rgba(255, 255, 255, 0.1);\n`;\n\nexport const SandboxImage = styled.div`\n  background-size: contain;\n  background-position: 50%;\n  background-repeat: no-repeat;\n  width: 100%;\n  z-index: 1;\n`;\n\nexport const SandboxInfo = styled.div`\n  position: relative;\n  display: flex;\n  padding: 0.6rem 0.75rem;\n  font-size: 0.875em;\n\n  align-items: center;\n`;\n\nexport const SandboxTitle = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  margin-bottom: 1rem;\n`;\n\nexport const ImageMessage = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  z-index: 0;\n\n  font-size: 1.125rem;\n  color: rgba(255, 255, 255, 0.6);\n`;\n\nexport const Avatar = styled.img`\n  width: 30px;\n  border-radius: 50%;\n  margin-right: 0.5rem;\n`;\n\nexport const Details = styled.footer`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 0.875em;\n  color: rgba(255, 255, 255, 0.5);\n  margin-top: 1rem;\n`;\n\nexport const FlexCenter = styled.section`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Pick = styled(Button)`\n  width: 100%;\n`;\n","import getTemplate from '@codesandbox/common/lib/templates';\nimport { GitInfo, User } from '@codesandbox/common/lib/types';\nimport {\n  profileUrl,\n  sandboxUrl,\n} from '@codesandbox/common/lib/utils/url-generator';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport EyeIcon from 'react-icons/lib/fa/eye';\nimport GithubIcon from 'react-icons/lib/fa/github';\n\nimport {\n  Avatar,\n  Container,\n  Details,\n  FlexCenter,\n  ImageMessage,\n  Pick,\n  SandboxImage,\n  SandboxImageContainer,\n  SandboxInfo,\n  SandboxTitle,\n} from './elements';\n\ninterface Props {\n  author: User;\n  description: string;\n  git: GitInfo;\n  id: string;\n  title: string;\n  viewCount: number;\n  picks: any[];\n  pickSandbox: (id: string, title: string, description: string) => void;\n  screenshotUrl: string;\n  template: any;\n}\n\nexport const SandboxCard: React.FC<Props> = ({\n  author,\n  description,\n  git,\n  id,\n  picks,\n  pickSandbox,\n  screenshotUrl,\n  template,\n  title,\n  viewCount,\n}) => {\n  const [screenShotURL, setScreenShotURL] = useState(screenshotUrl);\n  const screenShotTimeout = useRef(null);\n\n  const hasScreenshot = useCallback(() => {\n    const templateDefinition = getTemplate(template);\n\n    return !templateDefinition.isServer;\n  }, [template]);\n\n  const requestScreenshot = useCallback(() => {\n    setScreenShotURL(`/api/v1/sandboxes/${id}/screenshot.png`);\n  }, [id]);\n  const checkScreenShot = useCallback(() => {\n    if (!screenShotURL && hasScreenshot()) {\n      // We only request the screenshot if the sandbox card is in view for > 1 second\n      screenShotTimeout.current = setTimeout(requestScreenshot, 1000);\n    }\n  }, [hasScreenshot, requestScreenshot, screenShotURL]);\n  useEffect(() => {\n    checkScreenShot();\n\n    return () => clearTimeout(screenShotTimeout.current);\n  }, [checkScreenShot]);\n\n  const openSandbox = useCallback(() => {\n    const url = sandboxUrl({ id, alias: null });\n\n    window.open(url, '_blank');\n  }, [id]);\n\n  const getImageMessage = useCallback(() => {\n    const templateDefinition = getTemplate(template);\n\n    if (templateDefinition.isServer) {\n      return `Container Sandbox`;\n    }\n\n    if (process.env.STAGING) {\n      return `Staging Sandbox`;\n    }\n\n    return `Generating Screenshot...`;\n  }, [template]);\n\n  const openUser = useCallback(username => {\n    const url = profileUrl(username);\n\n    window.open(url, '_blank');\n  }, []);\n\n  const templateInfo = getTemplate(template);\n\n  return (\n    <div\n      style={{ backgroundColor: 'transparent', borderRadius: 2, padding: 2 }}\n    >\n      <Container style={{ outline: 'none' }}>\n        <SandboxImageContainer onClick={openSandbox} role=\"button\" tabIndex={0}>\n          <ImageMessage>{getImageMessage()}</ImageMessage>\n\n          {hasScreenshot() && (\n            <SandboxImage\n              style={{ backgroundImage: `url(${screenShotURL})` }}\n            />\n          )}\n        </SandboxImageContainer>\n\n        <SandboxInfo>\n          <div\n            style={{\n              backgroundColor: templateInfo.color(),\n              bottom: 0,\n              height: 'calc(100% + 34px)',\n              left: 0,\n              position: 'absolute',\n              top: 0,\n              width: 2,\n            }}\n          />\n          <div style={{ flex: 1 }}>\n            <div role=\"button\" tabIndex={0} onClick={openSandbox}>\n              <SandboxTitle>{title || id}</SandboxTitle>\n              {description}\n            </div>\n\n            <Details>\n              {author ? (\n                <FlexCenter\n                  onClick={() => openUser(author.username)}\n                  role=\"button\"\n                  tabIndex={0}\n                >\n                  <Avatar alt={author.username} src={author.avatarUrl} />\n\n                  {author.name || author.username}\n                </FlexCenter>\n              ) : null}\n\n              <FlexCenter onClick={openSandbox} role=\"button\" tabIndex={0}>\n                <EyeIcon style={{ marginRight: '0.5rem' }} />\n\n                {viewCount}\n              </FlexCenter>\n\n              {git ? (\n                <FlexCenter>\n                  <a\n                    href={`https://github.com/${git.username}/${git.repo}`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <GithubIcon style={{ marginRight: '0.5rem' }} />\n                  </a>\n                </FlexCenter>\n              ) : null}\n            </Details>\n          </div>\n        </SandboxInfo>\n\n        <Pick onClick={() => pickSandbox(id, title, description)} small>\n          {!picks.length ? '✨ Pick Sandbox' : '✨ Pick Sandbox again'}\n        </Pick>\n      </Container>\n    </div>\n  );\n};\n","import 'react-day-picker/lib/style.css';\n\nimport { Button } from '@codesandbox/common/lib/components/Button';\nimport MaxWidth from '@codesandbox/common/lib/components/flex/MaxWidth';\nimport Margin from '@codesandbox/common/lib/components/spacing/Margin';\nimport { SubTitle } from 'app/components/SubTitle';\nimport { useOvermind } from 'app/overmind';\nimport { Element } from '@codesandbox/components';\nimport { Navigation } from 'app/pages/common/Navigation';\nimport { format, getTime, subMonths, subWeeks } from 'date-fns';\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport DayPicker from 'react-day-picker';\n\nimport {\n  Buttons,\n  Container,\n  DelayedAnimation,\n  Heading,\n  PickerWrapper,\n} from './elements';\nimport { SandboxCard } from './SandboxCard';\n\nexport const Curator: FunctionComponent = () => {\n  const {\n    actions: {\n      explore: { pickSandboxModal, popularSandboxesMounted },\n    },\n    state: {\n      explore: { popularSandboxes },\n    },\n  } = useOvermind();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [showPicker, setShowPicker] = useState(false);\n\n  const fetchPopularSandboxes = useCallback(\n    date => {\n      popularSandboxesMounted(date);\n    },\n    [popularSandboxesMounted]\n  );\n\n  useEffect(() => {\n    fetchPopularSandboxes(getTime(subWeeks(new Date(), 1)));\n  }, [fetchPopularSandboxes]);\n\n  const pickSandbox = useCallback(\n    (id, title, description) => {\n      pickSandboxModal({ description, id, title });\n    },\n    [pickSandboxModal]\n  );\n\n  const handleDayClick = useCallback(\n    date => {\n      fetchPopularSandboxes(getTime(new Date(date)));\n\n      setSelectedDate(date);\n      setShowPicker(false);\n    },\n    [fetchPopularSandboxes]\n  );\n\n  return (\n    <Element style={{ width: '100vw', height: '100vh' }}>\n      <Navigation title=\"Curator Page\" />\n      <MaxWidth>\n        <Margin horizontal={1.5} vertical={1.5}>\n          <Heading>Curator Page</Heading>\n\n          <SubTitle>\n            Here you can choose the sandboxes that go in the explore page\n          </SubTitle>\n\n          <Buttons>\n            Most popular sandboxes in the:\n            <Button\n              onClick={() =>\n                fetchPopularSandboxes(getTime(subWeeks(new Date(), 1)))\n              }\n              small\n            >\n              Last Week\n            </Button>\n            <Button\n              onClick={() =>\n                fetchPopularSandboxes(getTime(subMonths(new Date(), 1)))\n              }\n              small\n            >\n              Last Month\n            </Button>\n            <Button\n              onClick={() =>\n                fetchPopularSandboxes(getTime(subMonths(new Date(), 6)))\n              }\n              small\n            >\n              Last 6 Months\n            </Button>\n            <Button onClick={() => setShowPicker(show => !show)} small>\n              {selectedDate\n                ? format(new Date(selectedDate), 'dd/MM/yyyy')\n                : 'Custom'}\n            </Button>\n            {showPicker ? (\n              <PickerWrapper>\n                <DayPicker\n                  onDayClick={handleDayClick}\n                  selectedDays={selectedDate}\n                />\n              </PickerWrapper>\n            ) : null}\n          </Buttons>\n\n          {popularSandboxes ? (\n            <Container>\n              {popularSandboxes.sandboxes.map(sandbox => (\n                <SandboxCard\n                  key={sandbox.id}\n                  {...sandbox}\n                  pickSandbox={pickSandbox}\n                />\n              ))}\n            </Container>\n          ) : (\n            <DelayedAnimation>Fetching Sandboxes...</DelayedAnimation>\n          )}\n        </Margin>\n      </MaxWidth>\n    </Element>\n  );\n};\n"],"sourceRoot":""}
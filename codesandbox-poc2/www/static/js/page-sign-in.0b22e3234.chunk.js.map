{"version":3,"sources":["webpack:///./src/app/pages/Live/index.tsx","webpack:///./src/app/pages/SignIn/index.tsx","webpack:///./src/app/pages/SignInAuth/index.js"],"names":["LivePage","match","useOvermind","state","actions","useEffect","live","roomJoined","roomId","params","id","onNavigateAway","content","isAuthenticating","user","error","style","fontWeight","color","marginBottom","fontSize","to","onClick","signInToRoom","small","marginRight","display","flexDirection","width","height","title","flex","horizontal","vertical","sandbox","editor","currentSandbox","getSandboxName","SignIn","genericPageMounted","redirectTo","URL","location","href","searchParams","get","hasLogIn","dashboardUrl","theme","codeSandboxBlack","css","backgroundColor","minHeight","fontFamily","overflow","align","justify","props","redirect","document","newSandboxUrl","jwt","setTimeout","signInUrl","window","opener","origin","postMessage","type","data","protocolAndHost","this","getMessage","React","PureComponent"],"mappings":"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","file":"static/js/page-sign-in.0b22e3234.chunk.js","sourcesContent":["import { Button } from '@codesandbox/common/lib/components/Button';\nimport Centered from '@codesandbox/common/lib/components/flex/Centered';\nimport Fullscreen from '@codesandbox/common/lib/components/flex/Fullscreen';\nimport Row from '@codesandbox/common/lib/components/flex/Row';\nimport Padding from '@codesandbox/common/lib/components/spacing/Padding';\nimport { getSandboxName } from '@codesandbox/common/lib/utils/get-sandbox-name';\nimport { SubTitle } from 'app/components/SubTitle';\nimport { Title } from 'app/components/Title';\nimport { useOvermind } from 'app/overmind';\nimport { Navigation } from 'app/pages/common/Navigation';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport GithubIcon from 'react-icons/lib/go/mark-github';\nimport { Link } from 'react-router-dom';\n\nimport Editor from '../Sandbox/Editor';\n\ninterface Props {\n  match: {\n    params: {\n      id: string;\n    };\n  };\n}\n\nexport const LivePage: React.FC<Props> = ({ match }) => {\n  const { state, actions } = useOvermind();\n\n  useEffect(() => {\n    actions.live.roomJoined({ roomId: match.params.id });\n  }, [actions.live, match.params.id]);\n\n  useEffect(\n    () => () => {\n      actions.live.onNavigateAway();\n    },\n    [actions.live]\n  );\n\n  function getContent() {\n    if (!state.isAuthenticating && !state.user) {\n      return (\n        <>\n          <div\n            style={{\n              fontWeight: 300,\n              color: 'rgba(255, 255, 255, 0.5)',\n              marginBottom: '1rem',\n              fontSize: '1.5rem',\n            }}\n          >\n            Sign in required\n          </div>\n          <Title style={{ fontSize: '1.25rem' }}>\n            You need to sign in to join this session\n          </Title>\n          <br />\n          <div>\n            <Button\n              onClick={() =>\n                actions.live.signInToRoom({ roomId: match.params.id })\n              }\n              small\n            >\n              <Row>\n                <GithubIcon style={{ marginRight: '0.5rem' }} /> Sign in with\n                GitHub\n              </Row>\n            </Button>\n          </div>\n        </>\n      );\n    }\n\n    if (state.live.error) {\n      if (state.live.error === 'room not found') {\n        return (\n          <>\n            <div\n              style={{\n                fontWeight: 300,\n                color: 'rgba(255, 255, 255, 0.5)',\n                marginBottom: '1rem',\n                fontSize: '1.5rem',\n              }}\n            >\n              Something went wrong\n            </div>\n            <Title style={{ fontSize: '1.25rem' }}>\n              It seems like this session doesn\n              {\"'\"}t exist or has been closed\n            </Title>\n            <br />\n            <Link to=\"/s\">Create Sandbox</Link>\n          </>\n        );\n      }\n\n      return (\n        <>\n          <Title>An error occured while connecting to the live session:</Title>\n          <SubTitle>{state.live.error}</SubTitle>\n          <br />\n          <br />\n          <Link to=\"/s\">Create Sandbox</Link>\n        </>\n      );\n    }\n\n    return null;\n  }\n\n  const content = getContent();\n\n  if (content) {\n    return (\n      <Fullscreen>\n        <Padding\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100vw',\n            height: '100vh',\n          }}\n        >\n          <Navigation title=\"Live Session\" />\n          <Centered\n            style={{ flex: 1, width: '100%', height: '100%' }}\n            horizontal\n            vertical\n          >\n            {content}\n          </Centered>\n        </Padding>\n      </Fullscreen>\n    );\n  }\n\n  const sandbox = state.editor.currentSandbox;\n\n  return (\n    <>\n      {sandbox && (\n        <Helmet>\n          <title>{getSandboxName(sandbox)} - CodeSandbox</title>\n        </Helmet>\n      )}\n      <Editor />\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { useOvermind } from 'app/overmind';\nimport { dashboardUrl } from '@codesandbox/common/lib/utils/url-generator';\nimport { Element, Stack, ThemeProvider } from '@codesandbox/components';\nimport codeSandboxBlack from '@codesandbox/components/lib/themes/codesandbox-black';\nimport { css } from '@styled-system/css';\nimport { Navigation } from '../common/Navigation';\nimport { SignInModalElement } from './Modal';\n\nconst SignIn = () => {\n  const {\n    state,\n    actions: { genericPageMounted },\n  } = useOvermind();\n  const redirectTo = new URL(location.href).searchParams.get('continue');\n\n  useEffect(() => {\n    genericPageMounted();\n  }, [genericPageMounted]);\n\n  if (state.hasLogIn && !redirectTo) {\n    return <Redirect to={dashboardUrl()} />;\n  }\n\n  return (\n    <ThemeProvider theme={codeSandboxBlack}>\n      <Element\n        css={css({\n          backgroundColor: 'sideBar.background',\n          minHeight: '100vh',\n          fontFamily: 'Inter, sans-serif',\n          overflow: 'hidden',\n        })}\n      >\n        <Navigation title=\"Sign In\" />\n        <Stack\n          css={css({\n            width: '100vw',\n            height: '100%',\n            marginBottom: 100,\n          })}\n          align=\"center\"\n          justify=\"center\"\n        >\n          <SignInModalElement redirectTo={redirectTo} />\n        </Stack>\n      </Element>\n    </ThemeProvider>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport Centered from '@codesandbox/common/lib/components/flex/Centered';\nimport {\n  protocolAndHost,\n  signInUrl,\n  newSandboxUrl,\n} from '@codesandbox/common/lib/utils/url-generator';\nimport { Title } from 'app/components/Title';\n\n// This route is supposed to be opened in a new window, after signing in with\n// Github. It should return a postMessage to the parent\n// eslint-disable-line-import/no-default-export\nexport default class SignIn extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    if (props.match.params.jwt) {\n      if (window.opener) {\n        this.state = {\n          jwt: props.match.params.jwt,\n        };\n        if (window.opener.location.origin === window.location.origin) {\n          window.opener.postMessage(\n            {\n              type: 'signin',\n              data: {\n                jwt: props.match.params.jwt,\n              },\n            },\n            protocolAndHost()\n          );\n        }\n        return;\n      }\n      this.state = {\n        redirect: '/',\n      };\n      return;\n    }\n\n    this.state = {\n      error: 'no message received',\n    };\n  }\n\n  getMessage = () => {\n    if (this.state.redirect) {\n      document.location.href = newSandboxUrl();\n      return 'Redirecting to sandbox page';\n    }\n    if (this.state.error) {\n      return `Something went wrong while signing in: ${this.state.error}`;\n    }\n    if (this.state.jwt) return 'Signing in...';\n    if (this.state.jwt == null) {\n      setTimeout(() => {\n        document.location.href = signInUrl();\n      }, 2000);\n      return 'Redirecting to sign in page...';\n    }\n\n    return 'Hey';\n  };\n\n  render() {\n    return (\n      <Centered horizontal vertical>\n        <Title>{this.getMessage()}</Title>\n      </Centered>\n    );\n  }\n}\n"],"sourceRoot":""}
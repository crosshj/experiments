{"version":3,"sources":["webpack:///./src/app/pages/common/Modals/MoveSandboxFolderModal/DirectoryPicker/TeamsPicker/elements.ts","webpack:///./src/app/pages/common/Modals/MoveSandboxFolderModal/DirectoryPicker/TeamsPicker/index.tsx","webpack:///./src/app/pages/common/Modals/MoveSandboxFolderModal/DirectoryPicker/index.tsx","webpack:///./src/app/pages/common/Modals/MoveSandboxFolderModal/index.tsx"],"names":["TeamContainer","styled","div","TeamName","TeamsPicker","currentPath","currentTeamId","onSelect","useQuery","TEAMS_QUERY","loading","error","data","me","teams","map","id","name","key","SandboxesItem","openByDefault","teamId","DirectoryPicker","undefined","MoveSandboxFolderModal","useOvermind","actions","modalClosed","refetchSandboxInfo","state","editor","currentSandbox","collection","team","useState","setError","setLoading","path","setPath","setTeamId","useEffect","addSandboxesToFolder","then","track","message","title","css","paddingRight","paddingLeft","paddingBottom","borderBottom","borderColor","maxHeight","overflow","newTeamId","newPath","marginTop","align","gap","justify","paddingTop","borderTop","variant","onClick","width","disabled","basename"],"mappings":"4uCAEO,IAAMA,EAAgBC,UAAOC,IAAV,8EAAGD,CAAH,KAMbE,EAAWF,UAAOC,IAAV,yEAAGD,CAAH,KCIRG,EAAwC,SAAC,GAI/C,IAHLC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,SACI,EAC6BC,YAASC,KAAlCC,EADJ,EACIA,QAASC,EADb,EACaA,MAAOC,EADpB,EACoBA,KAExB,OAAIF,GAAWC,EACN,KAIP,oCACGC,EAAKC,GAAGC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACjB,kBAACjB,EAAD,CAAekB,IAAKF,GAClB,kBAACb,EAAD,KAAWc,GAEX,kBAACE,EAAA,EAAD,CACEd,YAAaA,EACbC,cAAeA,EACfc,eAAa,EACbC,OAAQL,EACRT,SAAUA,UCxBTe,EAA4C,SAAC,GAAD,IACvDjB,EADuD,EACvDA,YACAC,EAFuD,EAEvDA,cACAC,EAHuD,EAGvDA,SAHuD,OAKvD,oCACE,kBAACY,EAAA,EAAD,CACEd,YAAaA,EACbC,cAAeA,EACfC,SAAUA,EACVa,eAAa,EACbC,YAAQE,IAGV,kBAAC,EAAD,CACElB,YAAaA,EACbC,cAAeA,EACfC,SAAUA,M,isCCfHiB,EAA4C,WAAO,IAAD,EAMzDC,cANyD,IAE3DC,QAAWC,EAFgD,EAEhDA,YAAaC,EAFmC,EAEnCA,mBAFmC,IAG3DC,MACEC,OAAUC,gBAGqC,GAA3CC,EAPqD,EAOrDA,WAAYhB,EAPyC,EAOzCA,GAAIiB,EAPqC,EAOrCA,KAPqC,EAQnCC,wBAASX,GAR0B,WAQtDZ,EARsD,KAQ/CwB,EAR+C,OAS/BD,oBAAS,GATsB,WAStDxB,EATsD,KAS7C0B,EAT6C,OAUrCF,oBAAmB,OAAVF,QAAU,IAAVA,OAAA,EAAAA,EAAYK,OAAQ,KAVQ,WAUtDA,EAVsD,KAUhDC,EAVgD,OAWjCJ,mBAAQ,OAACD,QAAD,IAACA,OAAD,EAACA,EAAMjB,IAXkB,WAWtDK,EAXsD,KAW9CkB,EAX8C,KA4C7D,OArBAC,qBAAU,WACH9B,GAIL+B,YAAqB,CAACzB,GAAKqB,EAAMhB,GAC9BqB,MAAK,WACJd,IAEAQ,GAAW,GACXT,IAEAgB,IAAM,+BAPV,OASS,YAAkB,IAAfC,EAAc,EAAdA,QACRT,EAASS,GAETR,GAAW,QAEd,CAACpB,EAAIN,EAASiB,EAAaU,EAAMT,EAAoBP,IAGtD,qBACEwB,MAAM,iBADR,KAEOC,IAAI,CACPC,aAAc,EACdC,YAAa,EACb,SAAU,CACRA,YAAa,EACbC,cAAe,EACfC,aAAc,YACdC,YAAa,qBAIjB,2BACOL,IAAI,CACPM,UAAW,IACXC,SAAU,UAGZ,kBAAC,EAAD,CACEhD,YAAagC,EACb/B,cAAee,EACfd,SAjDS,SAAC,GAA0C,IAAhC+C,EAA+B,EAAvCjC,OAAyBkC,EAAc,EAApBlB,KACrCE,EAAUe,GACVhB,EAAQiB,OAmDL5C,EAED,qBACE6C,UAAW,EACXC,MAAM,WACNC,IAAK,EACLC,QAAQ,WAJV,MAKOb,IAAI,CACPc,WAAY,EACZb,aAAc,EACdc,UAAW,YACXV,YAAa,oBAGf,qBAEEW,QAAQ,YACRC,QAASpC,EAHX,MACOmB,IAAI,CAAEkB,MAAO,UADpB,UAQA,qBAEEC,SAAUvD,EACVqD,QAnFW,WACjB3B,GAAW,GACXD,OAASZ,IA8EL,MACOuB,IAAI,CAAEkB,MAAO,UAIjBtD,EACC,oBAEA,sDAEa,MAAT2B,EACI6B,mBAAS7B,GADb,UAEOhB,EAAS,MAAQ,KAFxB,eAKF,kBAAC,IAAD","file":"static/js/74.167f7f948.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const TeamContainer = styled.div`\n  border-top: 2px solid rgba(0, 0, 0, 0.1);\n  padding-top: 0;\n  margin-top: 1rem;\n`;\n\nexport const TeamName = styled.div`\n  font-weight: 600;\n  color: rgba(255, 255, 255, 0.5);\n  text-transform: uppercase;\n  font-size: 0.875rem;\n  margin: 1rem 1rem;\n`;\n","import { useQuery } from '@apollo/react-hooks';\nimport React, { ComponentProps, FunctionComponent } from 'react';\n\nimport { TEAMS_QUERY } from 'app/pages/Dashboard/queries';\nimport { SandboxesItem } from 'app/pages/Dashboard/Sidebar/SandboxesItem';\n\nimport { TeamContainer, TeamName } from './elements';\n\ntype Props = Pick<\n  ComponentProps<typeof SandboxesItem>,\n  'currentPath' | 'currentTeamId' | 'onSelect'\n>;\nexport const TeamsPicker: FunctionComponent<Props> = ({\n  currentPath,\n  currentTeamId,\n  onSelect,\n}) => {\n  const { loading, error, data } = useQuery(TEAMS_QUERY);\n\n  if (loading || error) {\n    return null;\n  }\n\n  return (\n    <>\n      {data.me.teams.map(({ id, name }) => (\n        <TeamContainer key={id}>\n          <TeamName>{name}</TeamName>\n\n          <SandboxesItem\n            currentPath={currentPath}\n            currentTeamId={currentTeamId}\n            openByDefault\n            teamId={id}\n            onSelect={onSelect}\n          />\n        </TeamContainer>\n      ))}\n    </>\n  );\n};\n","import React, { ComponentProps, FunctionComponent } from 'react';\n\nimport { SandboxesItem } from 'app/pages/Dashboard/Sidebar/SandboxesItem';\n\nimport { TeamsPicker } from './TeamsPicker';\n\ntype Props = Pick<\n  ComponentProps<typeof TeamsPicker>,\n  'currentPath' | 'currentTeamId' | 'onSelect'\n>;\nexport const DirectoryPicker: FunctionComponent<Props> = ({\n  currentPath,\n  currentTeamId,\n  onSelect,\n}) => (\n  <>\n    <SandboxesItem\n      currentPath={currentPath}\n      currentTeamId={currentTeamId}\n      onSelect={onSelect}\n      openByDefault\n      teamId={undefined}\n    />\n\n    <TeamsPicker\n      currentPath={currentPath}\n      currentTeamId={currentTeamId}\n      onSelect={onSelect}\n    />\n  </>\n);\n","import track from '@codesandbox/common/lib/utils/analytics';\nimport { basename } from 'path';\nimport ChevronRight from 'react-icons/lib/md/chevron-right';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport css from '@styled-system/css';\nimport { useOvermind } from 'app/overmind';\nimport { Button, Stack, Element } from '@codesandbox/components';\nimport { addSandboxesToFolder } from '../../../Dashboard/queries';\n\nimport { DirectoryPicker } from './DirectoryPicker';\nimport { Alert } from '../Common/Alert';\n\nexport const MoveSandboxFolderModal: FunctionComponent = () => {\n  const {\n    actions: { modalClosed, refetchSandboxInfo },\n    state: {\n      editor: { currentSandbox },\n    },\n  } = useOvermind();\n  const { collection, id, team } = currentSandbox || {};\n  const [error, setError] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const [path, setPath] = useState(collection?.path || '/');\n  const [teamId, setTeamId] = useState(team?.id);\n\n  const handleMove = () => {\n    setLoading(true);\n    setError(undefined);\n  };\n\n  const onSelect = ({ teamId: newTeamId, path: newPath }) => {\n    setTeamId(newTeamId);\n    setPath(newPath);\n  };\n\n  useEffect(() => {\n    if (!loading) {\n      return;\n    }\n\n    addSandboxesToFolder([id], path, teamId)\n      .then(() => {\n        refetchSandboxInfo();\n\n        setLoading(false);\n        modalClosed();\n\n        track('Move Sandbox From Editor');\n      })\n      .catch(({ message }) => {\n        setError(message);\n\n        setLoading(false);\n      });\n  }, [id, loading, modalClosed, path, refetchSandboxInfo, teamId]);\n\n  return (\n    <Alert\n      title=\"Move to Folder\"\n      css={css({\n        paddingRight: 0,\n        paddingLeft: 0,\n        '> span': {\n          paddingLeft: 4,\n          paddingBottom: 4,\n          borderBottom: '1px solid',\n          borderColor: 'sideBar.border',\n        },\n      })}\n    >\n      <Element\n        css={css({\n          maxHeight: 400,\n          overflow: 'auto',\n        })}\n      >\n        <DirectoryPicker\n          currentPath={path}\n          currentTeamId={teamId}\n          onSelect={onSelect}\n        />\n      </Element>\n\n      {error}\n\n      <Stack\n        marginTop={4}\n        align=\"flex-end\"\n        gap={2}\n        justify=\"flex-end\"\n        css={css({\n          paddingTop: 4,\n          paddingRight: 4,\n          borderTop: '1px solid',\n          borderColor: 'sideBar.border',\n        })}\n      >\n        <Button\n          css={css({ width: 'auto' })}\n          variant=\"secondary\"\n          onClick={modalClosed}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          css={css({ width: 'auto' })}\n          disabled={loading}\n          onClick={handleMove}\n        >\n          {loading ? (\n            'Moving Sandbox...'\n          ) : (\n            <>\n              {`Move to ${\n                path !== '/'\n                  ? basename(path)\n                  : `${teamId ? 'Our' : 'My'} Sandboxes`\n              }`}\n\n              <ChevronRight />\n            </>\n          )}\n        </Button>\n      </Stack>\n    </Alert>\n  );\n};\n"],"sourceRoot":""}
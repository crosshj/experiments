import { Plugin } from '../api';
export declare enum ExecuteMode {
    None = 0,
    FirstNonNull = 1,
    Collect = 2
}
export declare class PluginHost {
    private emitter;
    private plugins;
    private config;
    on(name: string, listener: (...args: any[]) => void): void;
    notify(name: string, ...args: any[]): void;
    register(plugin: Plugin): void;
    execute<T>(name: string, args: any[], mode: ExecuteMode.FirstNonNull): Promise<T | null>;
    execute<T>(name: string, args: any[], mode: ExecuteMode.Collect): Promise<T[]>;
    execute<T>(name: string, args: any[], mode: ExecuteMode.None): Promise<void>;
    supports(name: string): boolean;
    updateConfig(config: Config): void;
    getConfig<T>(key: string): T;
    private readonly enabledPlugins;
}
export interface Config {
    plugin: Record<string, any>;
}

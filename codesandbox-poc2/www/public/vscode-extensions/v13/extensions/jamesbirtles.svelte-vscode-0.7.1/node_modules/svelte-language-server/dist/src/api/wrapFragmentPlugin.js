"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var interfaces_1 = require("./interfaces");
var fragmentPositions_1 = require("./fragmentPositions");
var Host_1 = require("./Host");
function wrapFragmentPlugin(plugin, fragmentPredicate) {
    function getFragment(document) {
        return document.findFragment(fragmentPredicate);
    }
    if (Host_1.OnRegister.is(plugin)) {
        var onRegister_1 = plugin.onRegister.bind(plugin);
        plugin.onRegister = function (host) {
            onRegister_1({
                on: function (name, listener) {
                    if (!name.startsWith('document')) {
                        host.on(name, listener);
                        return;
                    }
                    host.on(name, function (document) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        var fragment = getFragment(document);
                        if (!fragment) {
                            return;
                        }
                        listener.apply(void 0, [fragment].concat(args));
                    });
                },
                openDocument: function (document) { return host.openDocument(document); },
                lockDocument: function (uri) { return host.lockDocument(uri); },
                getConfig: function (key) { return host.getConfig(key); },
            });
        };
    }
    if (interfaces_1.DiagnosticsProvider.is(plugin)) {
        var getDiagnostics_1 = plugin.getDiagnostics.bind(plugin);
        plugin.getDiagnostics = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, getDiagnostics_1(fragment)];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapDiagnosticToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    if (interfaces_1.HoverProvider.is(plugin)) {
        var doHover_1 = plugin.doHover.bind(plugin);
        plugin.doHover = function (document, position) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, hover;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment || !fragment.isInFragment(position)) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, doHover_1(fragment, fragment.positionInFragment(position))];
                        case 1:
                            hover = _a.sent();
                            if (!hover) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, fragmentPositions_1.mapHoverToParent(fragment, hover)];
                    }
                });
            });
        };
    }
    if (interfaces_1.CompletionsProvider.is(plugin)) {
        var getCompletions_1 = plugin.getCompletions.bind(plugin);
        plugin.getCompletions = function (document, position) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment || !fragment.isInFragment(position)) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, getCompletions_1(fragment, fragment.positionInFragment(position))];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapCompletionItemToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    if (interfaces_1.FormattingProvider.is(plugin)) {
        var formatDocument_1 = plugin.formatDocument.bind(plugin);
        plugin.formatDocument = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, formatDocument_1(fragment)];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapTextEditToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    if (interfaces_1.DocumentColorsProvider.is(plugin)) {
        var getDocumentColors_1 = plugin.getDocumentColors.bind(plugin);
        plugin.getDocumentColors = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, getDocumentColors_1(fragment)];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapColorInformationToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    if (interfaces_1.ColorPresentationsProvider.is(plugin)) {
        var getColorPresentations_1 = plugin.getColorPresentations.bind(plugin);
        plugin.getColorPresentations = function (document, range, color) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, getColorPresentations_1(fragment, fragmentPositions_1.mapRangeToFragment(fragment, range), color)];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapColorPresentationToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    if (interfaces_1.DocumentSymbolsProvider.is(plugin)) {
        var getDocumentSymbols_1 = plugin.getDocumentSymbols.bind(plugin);
        plugin.getDocumentSymbols = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var fragment, items;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fragment = getFragment(document);
                            if (!fragment) {
                                return [2 /*return*/, []];
                            }
                            return [4 /*yield*/, getDocumentSymbols_1(fragment)];
                        case 1:
                            items = _a.sent();
                            return [2 /*return*/, items.map(function (item) { return fragmentPositions_1.mapSymbolInformationToParent(fragment, item); })];
                    }
                });
            });
        };
    }
    return plugin;
}
exports.wrapFragmentPlugin = wrapFragmentPlugin;
//# sourceMappingURL=wrapFragmentPlugin.js.map
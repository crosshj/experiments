import { Position, Fragment, FragmentPredicate } from './interfaces';
import { TextDocument } from 'vscode-languageserver-types';
/**
 * Represents a textual document.
 */
export declare abstract class Document implements TextDocument {
    /**
     * Get the text content of the document
     */
    abstract getText(): string;
    /**
     * Set the text content of the document
     * @param text The new text content
     */
    abstract setText(text: string): void;
    /**
     * Returns the path where this file can be found or null if not on disk
     */
    abstract getFilePath(): string | null;
    /**
     * Returns the url of the document
     */
    abstract getURL(): string;
    /**
     * Returns an object containing any metadata associated with this file
     */
    abstract getAttributes(): Record<string, any>;
    /**
     * Current version of the document.
     */
    version: number;
    private fragments;
    addFragment(document: Fragment): Fragment;
    findFragment(predicate: FragmentPredicate): Fragment | undefined;
    /**
     * Get the length of the document's content
     */
    getTextLength(): number;
    /**
     * Update the text between two positions.
     * @param text The new text slice
     * @param start Start offset of the new text
     * @param end End offset of the new text
     */
    update(text: string, start: number, end: number): void;
    /**
     * Get the line and character based on the offset
     * @param offset The index of the position
     */
    positionAt(offset: number): Position;
    /**
     * Get the index of the line and character position
     * @param position Line and character position
     */
    offsetAt(position: Position): number;
    private getLineOffsets;
    /**
     * Implements TextDocument
     */
    readonly uri: string;
    readonly lineCount: number;
    languageId: string;
}

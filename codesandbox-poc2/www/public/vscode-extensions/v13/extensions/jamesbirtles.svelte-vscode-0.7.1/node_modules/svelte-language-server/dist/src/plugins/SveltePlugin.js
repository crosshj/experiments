"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cosmiconfig_1 = __importDefault(require("cosmiconfig"));
var api_1 = require("../api");
var SvelteDocument_1 = require("../lib/documents/SvelteDocument");
var source_map_1 = require("source-map");
var loadSvelte_1 = require("./svelte/loadSvelte");
var DEFAULT_OPTIONS = {
    dev: true,
};
var SveltePlugin = /** @class */ (function () {
    function SveltePlugin() {
        this.pluginId = 'svelte';
        this.defaultConfig = {
            enable: true,
            diagnostics: { enable: true },
        };
    }
    SveltePlugin.prototype.onRegister = function (host) {
        this.host = host;
    };
    SveltePlugin.prototype.getDiagnostics = function (document) {
        return __awaiter(this, void 0, void 0, function () {
            var source, config, svelte, preprocessor, diagnostics, res, start, end;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.host.getConfig('svelte.diagnostics.enable')) {
                            return [2 /*return*/, []];
                        }
                        source = document.getText();
                        return [4 /*yield*/, this.loadConfig(document.getFilePath())];
                    case 1:
                        config = _a.sent();
                        svelte = loadSvelte_1.loadSvelte(document.getFilePath());
                        preprocessor = makePreprocessor(document, config.preprocess);
                        return [4 /*yield*/, svelte.preprocess(source, preprocessor)];
                    case 2:
                        source = (_a.sent()).toString();
                        preprocessor.transpiledDocument.setText(source);
                        try {
                            delete config.preprocess;
                            res = svelte.compile(source, config);
                            diagnostics = (res.stats.warnings || res.warnings || []).map(function (warning) {
                                var start = warning.start || { line: 1, column: 0 };
                                var end = warning.end || start;
                                return {
                                    range: api_1.Range.create(start.line - 1, start.column, end.line - 1, end.column),
                                    message: warning.message,
                                    severity: api_1.DiagnosticSeverity.Warning,
                                    source: 'svelte',
                                    code: warning.code,
                                };
                            });
                        }
                        catch (err) {
                            start = err.start || { line: 1, column: 0 };
                            end = err.end || start;
                            diagnostics = [
                                {
                                    range: api_1.Range.create(start.line - 1, start.column, end.line - 1, end.column),
                                    message: err.message,
                                    severity: api_1.DiagnosticSeverity.Error,
                                    source: 'svelte',
                                    code: err.code,
                                },
                            ];
                        }
                        return [4 /*yield*/, fixDiagnostics(document, preprocessor, diagnostics)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, diagnostics];
                }
            });
        });
    };
    SveltePlugin.prototype.loadConfig = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var config, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, cosmiconfig_1.default('svelte', {
                                packageProp: false,
                            }).load(path)];
                    case 1:
                        config = (_a.sent()).config;
                        return [2 /*return*/, __assign({}, DEFAULT_OPTIONS, config)];
                    case 2:
                        err_1 = _a.sent();
                        return [2 /*return*/, __assign({}, DEFAULT_OPTIONS, { preprocess: {} })];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return SveltePlugin;
}());
exports.SveltePlugin = SveltePlugin;
function makePreprocessor(document, preprocessors) {
    var _this = this;
    if (preprocessors === void 0) { preprocessors = {}; }
    var preprocessor = {
        fragments: [],
        transpiledDocument: new SvelteDocument_1.SvelteDocument(document.getURL(), document.getText()),
    };
    if (preprocessors.script) {
        preprocessor.script = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, preprocessors.script(args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.map) {
                            preprocessor.fragments.push({
                                source: document.script,
                                transpiled: preprocessor.transpiledDocument.script,
                                code: res.code,
                                map: res.map,
                            });
                        }
                        return [2 /*return*/, res];
                }
            });
        }); };
    }
    if (preprocessors.style) {
        preprocessor.style = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, preprocessors.style(args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.map) {
                            preprocessor.fragments.push({
                                source: document.style,
                                transpiled: preprocessor.transpiledDocument.style,
                                code: res.code,
                                map: res.map,
                            });
                        }
                        return [2 /*return*/, res];
                }
            });
        }); };
    }
    return preprocessor;
}
function fixDiagnostics(document, preprocessor, diagnostics) {
    return __awaiter(this, void 0, void 0, function () {
        var _loop_1, _i, _a, fragment, sortedFragments, _b, diagnostics_1, diag, _c, sortedFragments_1, fragment, start, sourceLength, transpiledLength, diff, end;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _loop_1 = function (fragment) {
                        var newDiagnostics, fragmentDiagnostics, _i, diagnostics_2, diag;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    newDiagnostics = [];
                                    fragmentDiagnostics = [];
                                    for (_i = 0, diagnostics_2 = diagnostics; _i < diagnostics_2.length; _i++) {
                                        diag = diagnostics_2[_i];
                                        if (fragment.transpiled.isInFragment(diag.range.start)) {
                                            fragmentDiagnostics.push(diag);
                                        }
                                        else {
                                            newDiagnostics.push(diag);
                                        }
                                    }
                                    diagnostics = newDiagnostics;
                                    if (fragmentDiagnostics.length === 0) {
                                        return [2 /*return*/, "continue"];
                                    }
                                    return [4 /*yield*/, source_map_1.SourceMapConsumer.with(fragment.map, null, function (consumer) {
                                            for (var _i = 0, fragmentDiagnostics_1 = fragmentDiagnostics; _i < fragmentDiagnostics_1.length; _i++) {
                                                var diag = fragmentDiagnostics_1[_i];
                                                diag.range = {
                                                    start: mapFragmentPositionBySourceMap(fragment.source, fragment.transpiled, consumer, diag.range.start),
                                                    end: mapFragmentPositionBySourceMap(fragment.source, fragment.transpiled, consumer, diag.range.end),
                                                };
                                            }
                                        })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, _a = preprocessor.fragments;
                    _d.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    fragment = _a[_i];
                    return [5 /*yield**/, _loop_1(fragment)];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4:
                    sortedFragments = preprocessor.fragments.sort(function (a, b) { return a.transpiled.offsetInParent(0) - b.transpiled.offsetInParent(0); });
                    if (diagnostics.length > 0) {
                        for (_b = 0, diagnostics_1 = diagnostics; _b < diagnostics_1.length; _b++) {
                            diag = diagnostics_1[_b];
                            for (_c = 0, sortedFragments_1 = sortedFragments; _c < sortedFragments_1.length; _c++) {
                                fragment = sortedFragments_1[_c];
                                start = preprocessor.transpiledDocument.offsetAt(diag.range.start);
                                if (fragment.transpiled.details.container.end > start) {
                                    continue;
                                }
                                sourceLength = fragment.source.details.container.end -
                                    fragment.source.details.container.start;
                                transpiledLength = fragment.transpiled.details.container.end -
                                    fragment.transpiled.details.container.start;
                                diff = sourceLength - transpiledLength;
                                end = preprocessor.transpiledDocument.offsetAt(diag.range.end);
                                diag.range = {
                                    start: document.positionAt(start + diff),
                                    end: document.positionAt(end + diff),
                                };
                            }
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function mapFragmentPositionBySourceMap(source, transpiled, consumer, pos) {
    // Start with a position that exists in the transpiled fragment's parent
    // Map the position to be relative to the transpiled fragment only
    var transpiledPosition = transpiled.positionInFragment(pos);
    // Map the position, using the sourcemap, to a position in the source fragment
    var mappedPosition = consumer.originalPositionFor({
        line: transpiledPosition.line + 1,
        column: transpiledPosition.character,
    });
    var sourcePosition = {
        line: mappedPosition.line - 1,
        character: mappedPosition.column,
    };
    // Map the position to be relative to the source fragment's parent
    return source.positionInParent(sourcePosition);
}
//# sourceMappingURL=SveltePlugin.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var lodash_1 = require("lodash");
var ExecuteMode;
(function (ExecuteMode) {
    ExecuteMode[ExecuteMode["None"] = 0] = "None";
    ExecuteMode[ExecuteMode["FirstNonNull"] = 1] = "FirstNonNull";
    ExecuteMode[ExecuteMode["Collect"] = 2] = "Collect";
})(ExecuteMode = exports.ExecuteMode || (exports.ExecuteMode = {}));
var PluginHost = /** @class */ (function () {
    function PluginHost() {
        this.emitter = new events_1.EventEmitter();
        this.plugins = [];
        this.config = {
            plugin: {},
        };
    }
    PluginHost.prototype.on = function (name, listener) {
        this.emitter.on(name, listener);
    };
    PluginHost.prototype.notify = function (name) {
        var _a, _b, _c;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.emitter).emit.apply(_a, [name + '|pre'].concat(args));
        (_b = this.emitter).emit.apply(_b, [name].concat(args));
        (_c = this.emitter).emit.apply(_c, [name + '|post'].concat(args));
    };
    PluginHost.prototype.register = function (plugin) {
        this.plugins.push(plugin);
        this.config.plugin[plugin.pluginId] = plugin.defaultConfig;
        if (typeof plugin.onRegister === 'function') {
            plugin.onRegister(this);
        }
    };
    PluginHost.prototype.execute = function (name, args, mode) {
        return __awaiter(this, void 0, void 0, function () {
            var plugins, _a, _i, plugins_1, plugin, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        plugins = this.enabledPlugins.filter(function (plugin) { return typeof plugin[name] === 'function'; });
                        _a = mode;
                        switch (_a) {
                            case ExecuteMode.FirstNonNull: return [3 /*break*/, 1];
                            case ExecuteMode.Collect: return [3 /*break*/, 6];
                            case ExecuteMode.None: return [3 /*break*/, 7];
                        }
                        return [3 /*break*/, 9];
                    case 1:
                        _i = 0, plugins_1 = plugins;
                        _b.label = 2;
                    case 2:
                        if (!(_i < plugins_1.length)) return [3 /*break*/, 5];
                        plugin = plugins_1[_i];
                        return [4 /*yield*/, plugin[name].apply(plugin, args)];
                    case 3:
                        res = _b.sent();
                        if (res != null) {
                            return [2 /*return*/, res];
                        }
                        _b.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, null];
                    case 6: return [2 /*return*/, Promise.all(plugins.map(function (plugin) { return plugin[name].apply(plugin, args); }))];
                    case 7: return [4 /*yield*/, Promise.all(plugins.map(function (plugin) { return plugin[name].apply(plugin, args); }))];
                    case 8:
                        _b.sent();
                        return [2 /*return*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    PluginHost.prototype.supports = function (name) {
        return this.enabledPlugins.find(function (plugin) { return typeof plugin[name] === 'function'; }) != null;
    };
    PluginHost.prototype.updateConfig = function (config) {
        this.config = config;
    };
    PluginHost.prototype.getConfig = function (key) {
        return lodash_1.get(this.config.plugin, key);
    };
    Object.defineProperty(PluginHost.prototype, "enabledPlugins", {
        get: function () {
            var _this = this;
            return this.plugins.filter(function (p) { return _this.getConfig(p.pluginId + ".enable"); });
        },
        enumerable: true,
        configurable: true
    });
    return PluginHost;
}());
exports.PluginHost = PluginHost;
//# sourceMappingURL=PluginHost.js.map
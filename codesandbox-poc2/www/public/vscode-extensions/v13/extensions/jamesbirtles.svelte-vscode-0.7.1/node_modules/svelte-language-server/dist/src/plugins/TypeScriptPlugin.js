"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var prettier = __importStar(require("prettier"));
var detect_indent_1 = __importDefault(require("detect-indent"));
var indent_string_1 = __importDefault(require("indent-string"));
var vscode_uri_1 = __importDefault(require("vscode-uri"));
var api_1 = require("../api");
var utils_1 = require("./typescript/utils");
var service_1 = require("./typescript/service");
var TypeScriptPlugin = /** @class */ (function () {
    function TypeScriptPlugin() {
        this.pluginId = 'typescript';
        this.defaultConfig = {
            enable: true,
            diagnostics: { enable: true },
            hover: { enable: true },
            format: { enable: true },
        };
    }
    TypeScriptPlugin.matchFragment = function (fragment) {
        return fragment.details.attributes.tag == 'script';
    };
    TypeScriptPlugin.prototype.onRegister = function (host) {
        this.host = host;
        this.createDocument = function (fileName, content) {
            var uri = vscode_uri_1.default.file(fileName).toString();
            var document = host.openDocument({
                languageId: '',
                text: content,
                uri: uri,
                version: 1,
            });
            host.lockDocument(uri);
            return document;
        };
    };
    TypeScriptPlugin.prototype.getDiagnostics = function (document) {
        if (!this.host.getConfig('typescript.diagnostics.enable')) {
            return [];
        }
        var lang = service_1.getLanguageServiceForDocument(document, this.createDocument);
        var syntaxDiagnostics = lang.getSyntacticDiagnostics(document.getFilePath());
        var semanticDiagnostics = lang.getSemanticDiagnostics(document.getFilePath());
        return syntaxDiagnostics.concat(semanticDiagnostics).map(function (diagnostic) { return ({
            range: utils_1.convertRange(document, diagnostic),
            severity: api_1.DiagnosticSeverity.Error,
            source: utils_1.getScriptKindFromAttributes(document.getAttributes()) === typescript_1.default.ScriptKind.TS
                ? 'ts'
                : 'js',
            message: typescript_1.default.flattenDiagnosticMessageText(diagnostic.messageText, '\n'),
        }); });
    };
    TypeScriptPlugin.prototype.doHover = function (document, position) {
        if (!this.host.getConfig('typescript.hover.enable')) {
            return null;
        }
        var lang = service_1.getLanguageServiceForDocument(document, this.createDocument);
        var info = lang.getQuickInfoAtPosition(document.getFilePath(), document.offsetAt(position));
        if (!info) {
            return null;
        }
        var contents = typescript_1.default.displayPartsToString(info.displayParts);
        return {
            range: utils_1.convertRange(document, info.textSpan),
            contents: { language: 'ts', value: contents },
        };
    };
    TypeScriptPlugin.prototype.formatDocument = function (document) {
        return __awaiter(this, void 0, void 0, function () {
            var config, formattedCode, indent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.host.getConfig('typescript.format.enable')) {
                            return [2 /*return*/, []];
                        }
                        if (document.getTextLength() === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, prettier.resolveConfig(document.getFilePath())];
                    case 1:
                        config = _a.sent();
                        formattedCode = prettier.format(document.getText(), __assign({}, config, { parser: getParserFromAttributes(document.getAttributes()) }));
                        indent = detect_indent_1.default(document.getText());
                        return [2 /*return*/, [
                                api_1.TextEdit.replace(api_1.Range.create(document.positionAt(0), document.positionAt(document.getTextLength())), '\n' +
                                    indent_string_1.default(formattedCode, indent.amount, indent.type == 'tab' ? '\t' : ' ')),
                            ]];
                }
            });
        });
    };
    TypeScriptPlugin.prototype.getDocumentSymbols = function (document) {
        if (!this.host.getConfig('typescript.documentSymbols.enable')) {
            return [];
        }
        var lang = service_1.getLanguageServiceForDocument(document, this.createDocument);
        var navTree = lang.getNavigationTree(document.getFilePath());
        var symbols = [];
        collectSymbols(navTree, undefined, function (symbol) { return symbols.push(symbol); });
        var topContainerName = symbols[0].name;
        return symbols.slice(1).map(function (symbol) {
            if (symbol.containerName === topContainerName) {
                return __assign({}, symbol, { containerName: 'script' });
            }
            return symbol;
        });
        function collectSymbols(tree, container, cb) {
            var start = tree.spans[0];
            var end = tree.spans[tree.spans.length - 1];
            if (start && end) {
                cb(api_1.SymbolInformation.create(tree.text, utils_1.symbolKindFromString(tree.kind), api_1.Range.create(document.positionAt(start.start), document.positionAt(end.start + end.length)), document.getURL(), container));
            }
            if (tree.childItems) {
                for (var _i = 0, _a = tree.childItems; _i < _a.length; _i++) {
                    var child = _a[_i];
                    collectSymbols(child, tree.text, cb);
                }
            }
        }
    };
    return TypeScriptPlugin;
}());
exports.TypeScriptPlugin = TypeScriptPlugin;
function getParserFromAttributes(attrs) {
    var type = attrs.lang || attrs.type;
    switch (type) {
        case 'typescript':
        case 'text/typescript':
            return 'typescript';
        case 'javascript':
        case 'text/javascript':
        default:
            return 'babylon';
    }
}
//# sourceMappingURL=TypeScriptPlugin.js.map
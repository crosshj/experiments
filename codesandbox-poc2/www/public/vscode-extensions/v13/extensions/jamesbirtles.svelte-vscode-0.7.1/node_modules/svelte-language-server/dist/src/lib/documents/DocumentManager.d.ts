import { TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentContentChangeEvent, TextDocumentIdentifier, CompletionItem, TextEdit } from 'vscode-languageserver-types';
import { PluginHost } from '../PluginHost';
import { Document, Diagnostic, Hover, Position, ColorInformation, Range, Color, ColorPresentation, SymbolInformation } from '../../api';
export interface DocumentManager {
    on(evt: 'documentChange', listener: (document: Document) => void): this;
}
export declare class DocumentManager extends PluginHost {
    private createDocument;
    documents: Map<string, Document>;
    locked: Set<string>;
    constructor(createDocument: (textDocument: TextDocumentItem) => Document);
    openDocument(textDocument: TextDocumentItem): Document;
    lockDocument(uri: string): void;
    closeDocument(textDocument: TextDocumentIdentifier): void;
    updateDocument(textDocument: VersionedTextDocumentIdentifier, changes: TextDocumentContentChangeEvent[]): void;
    getDiagnostics(textDocument: TextDocumentIdentifier): Promise<Diagnostic[]>;
    doHover(textDocument: TextDocumentIdentifier, position: Position): Promise<Hover | null>;
    getCompletions(textDocument: TextDocumentIdentifier, position: Position): Promise<CompletionItem[]>;
    formatDocument(textDocument: TextDocumentIdentifier): Promise<TextEdit[]>;
    doTagComplete(textDocument: TextDocumentIdentifier, position: Position): Promise<string | null>;
    getDocumentColors(textDocument: TextDocumentIdentifier): Promise<ColorInformation[]>;
    getColorPresentations(textDocument: TextDocumentIdentifier, range: Range, color: Color): Promise<ColorPresentation[]>;
    getDocumentSymbols(textDocument: TextDocumentIdentifier): Promise<SymbolInformation[]>;
}

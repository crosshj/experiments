"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_html_languageservice_1 = require("vscode-html-languageservice");
var vscode_emmet_helper_1 = require("vscode-emmet-helper");
var api_1 = require("../api");
var HTMLPlugin = /** @class */ (function () {
    function HTMLPlugin() {
        this.pluginId = 'html';
        this.defaultConfig = {
            enable: true,
            hover: { enable: true },
            completions: { enable: true },
            tagComplete: { enable: true },
            format: { enable: true },
            documentSymbols: { enable: true },
        };
        this.lang = vscode_html_languageservice_1.getLanguageService();
        this.documents = new WeakMap();
    }
    HTMLPlugin.prototype.onRegister = function (host) {
        var _this = this;
        this.host = host;
        host.on('documentChange|pre', function (document) {
            var html = _this.lang.parseHTMLDocument(document);
            _this.documents.set(document, html);
        });
    };
    HTMLPlugin.prototype.doHover = function (document, position) {
        if (!this.host.getConfig('html.hover.enable')) {
            return null;
        }
        var html = this.documents.get(document);
        if (!html) {
            return null;
        }
        return this.lang.doHover(document, position, html);
    };
    HTMLPlugin.prototype.getCompletions = function (document, position) {
        if (!this.host.getConfig('html.completions.enable')) {
            return [];
        }
        var html = this.documents.get(document);
        if (!html) {
            return [];
        }
        var emmetResults = {
            isIncomplete: true,
            items: [],
        };
        this.lang.setCompletionParticipants([
            vscode_emmet_helper_1.getEmmetCompletionParticipants(document, position, 'html', {}, emmetResults),
        ]);
        var results = this.lang.doComplete(document, position, html);
        return results.items.concat(emmetResults.items);
    };
    HTMLPlugin.prototype.doTagComplete = function (document, position) {
        if (!this.host.getConfig('html.tagComplete.enable')) {
            return null;
        }
        var html = this.documents.get(document);
        if (!html) {
            return null;
        }
        return this.lang.doTagComplete(document, position, html);
    };
    HTMLPlugin.prototype.formatDocument = function (document) {
        if (!this.host.getConfig('html.format.enable')) {
            return [];
        }
        var html = this.documents.get(document);
        if (!html) {
            return [];
        }
        var style = html.roots.find(function (node) { return node.tag === 'style'; });
        var script = html.roots.find(function (node) { return node.tag === 'script'; });
        var rangeEnd = document.getTextLength();
        if (style && style.start < rangeEnd) {
            rangeEnd = style.start + 1;
        }
        if (script && script.start < rangeEnd) {
            rangeEnd = script.start + 1;
        }
        var range = api_1.Range.create(document.positionAt(0), document.positionAt(rangeEnd));
        var settings = this.host.getConfig('html.format.settings') || {};
        return this.lang.format(document, range, settings);
    };
    HTMLPlugin.prototype.getDocumentSymbols = function (document) {
        if (!this.host.getConfig('html.documentSymbols.enable')) {
            return [];
        }
        var html = this.documents.get(document);
        if (!html) {
            return [];
        }
        return this.lang.findDocumentSymbols(document, html);
    };
    return HTMLPlugin;
}());
exports.HTMLPlugin = HTMLPlugin;
//# sourceMappingURL=HTMLPlugin.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_css_languageservice_1 = require("vscode-css-languageservice");
var prettier = __importStar(require("prettier"));
var detect_indent_1 = __importDefault(require("detect-indent"));
var indent_string_1 = __importDefault(require("indent-string"));
var api_1 = require("../api");
var vscode_emmet_helper_1 = require("vscode-emmet-helper");
var CSSPlugin = /** @class */ (function () {
    function CSSPlugin() {
        this.pluginId = 'css';
        this.defaultConfig = {
            enable: true,
            diagnostics: { enable: true },
            hover: { enable: true },
            completions: { enable: true },
            format: { enable: true },
            documentColors: { enable: true },
            colorPresentations: { enable: true },
            documentSymbols: { enable: true },
        };
        this.stylesheets = new WeakMap();
    }
    CSSPlugin.matchFragment = function (fragment) {
        return fragment.details.attributes.tag == 'style';
    };
    CSSPlugin.prototype.onRegister = function (host) {
        var _this = this;
        this.host = host;
        host.on('documentChange', function (document) {
            return _this.stylesheets.set(document, getLanguageService(extractLanguage(document)).parseStylesheet(document));
        });
        host.on('documentClose', function (document) { return _this.stylesheets.delete(document); });
    };
    CSSPlugin.prototype.getDiagnostics = function (document) {
        if (!this.host.getConfig('css.diagnostics.enable')) {
            return [];
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return [];
        }
        return getLanguageService(extractLanguage(document))
            .doValidation(document, stylesheet)
            .map(function (diagnostic) { return (__assign({}, diagnostic, { source: 'css' })); });
    };
    CSSPlugin.prototype.doHover = function (document, position) {
        if (!this.host.getConfig('css.hover.enable')) {
            return null;
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return null;
        }
        return getLanguageService(extractLanguage(document)).doHover(document, position, stylesheet);
    };
    CSSPlugin.prototype.getCompletions = function (document, position) {
        if (!this.host.getConfig('css.completions.enable')) {
            return [];
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return [];
        }
        var type = extractLanguage(document);
        var lang = getLanguageService(type);
        var emmetResults = {
            isIncomplete: true,
            items: [],
        };
        lang.setCompletionParticipants([
            vscode_emmet_helper_1.getEmmetCompletionParticipants(document, position, getLanguage(type), {}, emmetResults),
        ]);
        var results = lang.doComplete(document, position, stylesheet);
        return (results ? results.items : []).concat(emmetResults.items);
    };
    CSSPlugin.prototype.formatDocument = function (document) {
        return __awaiter(this, void 0, void 0, function () {
            var config, formattedCode, indent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.host.getConfig('css.format.enable')) {
                            return [2 /*return*/, []];
                        }
                        if (document.getTextLength() === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, prettier.resolveConfig(document.getFilePath())];
                    case 1:
                        config = _a.sent();
                        formattedCode = prettier.format(document.getText(), __assign({}, config, { parser: getLanguage(extractLanguage(document)) }));
                        indent = detect_indent_1.default(document.getText());
                        return [2 /*return*/, [
                                api_1.TextEdit.replace(api_1.Range.create(document.positionAt(0), document.positionAt(document.getTextLength())), '\n' +
                                    indent_string_1.default(formattedCode, indent.amount, indent.type == 'tab' ? '\t' : ' ')),
                            ]];
                }
            });
        });
    };
    CSSPlugin.prototype.getDocumentColors = function (document) {
        if (!this.host.getConfig('css.documentColors.enable')) {
            return [];
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return [];
        }
        return getLanguageService(extractLanguage(document)).findDocumentColors(document, stylesheet);
    };
    CSSPlugin.prototype.getColorPresentations = function (document, range, color) {
        if (!this.host.getConfig('css.colorPresentations.enable')) {
            return [];
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return [];
        }
        return getLanguageService(extractLanguage(document)).getColorPresentations(document, stylesheet, color, range);
    };
    CSSPlugin.prototype.getDocumentSymbols = function (document) {
        if (!this.host.getConfig('css.documentColors.enable')) {
            return [];
        }
        var stylesheet = this.stylesheets.get(document);
        if (!stylesheet) {
            return [];
        }
        return getLanguageService(extractLanguage(document))
            .findDocumentSymbols(document, stylesheet)
            .map(function (symbol) {
            if (!symbol.containerName) {
                return __assign({}, symbol, { 
                    // TODO: this could contain other things, e.g. style.myclass
                    containerName: 'style' });
            }
            return symbol;
        });
    };
    return CSSPlugin;
}());
exports.CSSPlugin = CSSPlugin;
var langs = {
    css: vscode_css_languageservice_1.getCSSLanguageService(),
    scss: vscode_css_languageservice_1.getSCSSLanguageService(),
    less: vscode_css_languageservice_1.getLESSLanguageService(),
};
function extractLanguage(document) {
    var attrs = document.getAttributes();
    return attrs.lang || attrs.type;
}
function getLanguage(kind) {
    switch (kind) {
        case 'scss':
        case 'text/scss':
            return 'scss';
        case 'less':
        case 'text/less':
            return 'less';
        case 'css':
        case 'text/css':
        default:
            return 'css';
    }
}
function getLanguageService(kind) {
    var lang = getLanguage(kind);
    return langs[lang];
}
//# sourceMappingURL=CSSPlugin.js.map
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("../../api");
var DocumentFragment = /** @class */ (function (_super) {
    __extends(DocumentFragment, _super);
    /**
     * @param parent The fragment's parent document
     * @param offsets The start and end offset in the parent document
     */
    function DocumentFragment(parent, details) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.details = details;
        return _this;
    }
    /**
     * Get the fragment offset relative to the parent
     * @param offset Offset in fragment
     */
    DocumentFragment.prototype.offsetInParent = function (offset) {
        return this.details.start + offset;
    };
    /**
     * Get the fragment position relative to the parent
     * @param pos Position in fragment
     */
    DocumentFragment.prototype.positionInParent = function (pos) {
        var parentOffset = this.offsetInParent(this.offsetAt(pos));
        return this.parent.positionAt(parentOffset);
    };
    /**
     * Get the offset relative to the start of the fragment
     * @param offset Offset in parent
     */
    DocumentFragment.prototype.offsetInFragment = function (offset) {
        return offset - this.details.start;
    };
    /**
     * Get the position relative to the start of the fragment
     * @param pos Position in parent
     */
    DocumentFragment.prototype.positionInFragment = function (pos) {
        var fragmentOffset = this.offsetInFragment(this.parent.offsetAt(pos));
        return this.positionAt(fragmentOffset);
    };
    /**
     * Returns true if the given parent position is inside of this fragment
     * @param pos Position in parent
     */
    DocumentFragment.prototype.isInFragment = function (pos) {
        var offset = this.parent.offsetAt(pos);
        return offset >= this.details.start && offset <= this.details.end;
    };
    /**
     * Get the fragment text from the parent
     */
    DocumentFragment.prototype.getText = function () {
        return this.parent.getText().slice(this.details.start, this.details.end);
    };
    /**
     * Update the fragment text in the parent
     */
    DocumentFragment.prototype.setText = function (text) {
        this.parent.update(text, this.details.start, this.details.end);
    };
    /**
     * Returns the length of the fragment as calculated from the start and end positon
     */
    DocumentFragment.prototype.getTextLength = function () {
        return this.details.end - this.details.start;
    };
    /**
     * Return the parent file path
     */
    DocumentFragment.prototype.getFilePath = function () {
        return this.parent.getFilePath();
    };
    DocumentFragment.prototype.getURL = function () {
        return this.parent.getURL();
    };
    Object.defineProperty(DocumentFragment.prototype, "version", {
        get: function () {
            return this.parent.version;
        },
        set: function (version) {
            // ignore
        },
        enumerable: true,
        configurable: true
    });
    DocumentFragment.prototype.getAttributes = function () {
        return this.details.attributes;
    };
    return DocumentFragment;
}(api_1.Document));
exports.DocumentFragment = DocumentFragment;
//# sourceMappingURL=DocumentFragment.js.map
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var PluginHost_1 = require("../PluginHost");
var utils_1 = require("../../utils");
var DocumentManager = /** @class */ (function (_super) {
    __extends(DocumentManager, _super);
    function DocumentManager(createDocument) {
        var _this = _super.call(this) || this;
        _this.createDocument = createDocument;
        _this.documents = new Map();
        _this.locked = new Set();
        return _this;
    }
    DocumentManager.prototype.openDocument = function (textDocument) {
        var document;
        if (this.documents.has(textDocument.uri)) {
            document = this.documents.get(textDocument.uri);
            document.setText(textDocument.text);
        }
        else {
            document = this.createDocument(textDocument);
            this.documents.set(textDocument.uri, document);
            this.notify('documentOpen', document);
        }
        this.notify('documentChange', document);
        return document;
    };
    DocumentManager.prototype.lockDocument = function (uri) {
        this.locked.add(uri);
    };
    DocumentManager.prototype.closeDocument = function (textDocument) {
        var document = this.documents.get(textDocument.uri);
        if (!document) {
            throw new Error('Cannot call methods on an unopened document');
        }
        this.notify('documentClose', document);
        // Some plugin may prevent a document from actually being closed.
        if (!this.locked.has(textDocument.uri)) {
            this.documents.delete(textDocument.uri);
        }
    };
    DocumentManager.prototype.updateDocument = function (textDocument, changes) {
        var document = this.documents.get(textDocument.uri);
        if (!document) {
            throw new Error('Cannot call methods on an unopened document');
        }
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            var start = 0;
            var end = 0;
            if (!change.range) {
                end = document.getTextLength();
            }
            else {
                start = document.offsetAt(change.range.start);
                end = document.offsetAt(change.range.end);
            }
            document.update(change.text, start, end);
        }
        this.notify('documentChange', document);
    };
    DocumentManager.prototype.getDiagnostics = function (textDocument) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('getDiagnostics', [document], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    DocumentManager.prototype.doHover = function (textDocument, position) {
        return __awaiter(this, void 0, void 0, function () {
            var document;
            return __generator(this, function (_a) {
                document = this.documents.get(textDocument.uri);
                if (!document) {
                    throw new Error('Cannot call methods on an unopened document');
                }
                return [2 /*return*/, this.execute('doHover', [document, position], PluginHost_1.ExecuteMode.FirstNonNull)];
            });
        });
    };
    DocumentManager.prototype.getCompletions = function (textDocument, position) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('getCompletions', [document, position], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    DocumentManager.prototype.formatDocument = function (textDocument) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('formatDocument', [document], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    DocumentManager.prototype.doTagComplete = function (textDocument, position) {
        return __awaiter(this, void 0, void 0, function () {
            var document;
            return __generator(this, function (_a) {
                document = this.documents.get(textDocument.uri);
                if (!document) {
                    throw new Error('Cannot call methods on an unopened document');
                }
                return [2 /*return*/, this.execute('doTagComplete', [document, position], PluginHost_1.ExecuteMode.FirstNonNull)];
            });
        });
    };
    DocumentManager.prototype.getDocumentColors = function (textDocument) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('getDocumentColors', [document], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    DocumentManager.prototype.getColorPresentations = function (textDocument, range, color) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('getColorPresentations', [document, range, color], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    DocumentManager.prototype.getDocumentSymbols = function (textDocument) {
        return __awaiter(this, void 0, void 0, function () {
            var document, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        document = this.documents.get(textDocument.uri);
                        if (!document) {
                            throw new Error('Cannot call methods on an unopened document');
                        }
                        _a = utils_1.flatten;
                        return [4 /*yield*/, this.execute('getDocumentSymbols', [document], PluginHost_1.ExecuteMode.Collect)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                }
            });
        });
    };
    return DocumentManager;
}(PluginHost_1.PluginHost));
exports.DocumentManager = DocumentManager;
//# sourceMappingURL=DocumentManager.js.map
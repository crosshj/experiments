"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var api_1 = require("../../api");
function getScriptKindFromFileName(fileName) {
    var ext = fileName.substr(fileName.lastIndexOf('.'));
    switch (ext.toLowerCase()) {
        case typescript_1.default.Extension.Js:
            return typescript_1.default.ScriptKind.JS;
        case typescript_1.default.Extension.Jsx:
            return typescript_1.default.ScriptKind.JSX;
        case typescript_1.default.Extension.Ts:
            return typescript_1.default.ScriptKind.TS;
        case typescript_1.default.Extension.Tsx:
            return typescript_1.default.ScriptKind.TSX;
        case typescript_1.default.Extension.Json:
            return typescript_1.default.ScriptKind.JSON;
        default:
            return typescript_1.default.ScriptKind.Unknown;
    }
}
exports.getScriptKindFromFileName = getScriptKindFromFileName;
function getScriptKindFromAttributes(attrs) {
    var type = attrs.lang || attrs.type;
    switch (type) {
        case 'typescript':
        case 'text/typescript':
            return typescript_1.default.ScriptKind.TS;
        case 'javascript':
        case 'text/javascript':
        default:
            return typescript_1.default.ScriptKind.JS;
    }
}
exports.getScriptKindFromAttributes = getScriptKindFromAttributes;
function isSvelte(filePath) {
    return filePath.endsWith('.html') || filePath.endsWith('.svelte');
}
exports.isSvelte = isSvelte;
function convertRange(document, range) {
    return api_1.Range.create(document.positionAt(range.start || 0), document.positionAt((range.start || 0) + (range.length || 0)));
}
exports.convertRange = convertRange;
function symbolKindFromString(kind) {
    switch (kind) {
        case 'module':
            return api_1.SymbolKind.Module;
        case 'class':
            return api_1.SymbolKind.Class;
        case 'local class':
            return api_1.SymbolKind.Class;
        case 'interface':
            return api_1.SymbolKind.Interface;
        case 'enum':
            return api_1.SymbolKind.Enum;
        case 'enum member':
            return api_1.SymbolKind.Constant;
        case 'var':
            return api_1.SymbolKind.Variable;
        case 'local var':
            return api_1.SymbolKind.Variable;
        case 'function':
            return api_1.SymbolKind.Function;
        case 'local function':
            return api_1.SymbolKind.Function;
        case 'method':
            return api_1.SymbolKind.Method;
        case 'getter':
            return api_1.SymbolKind.Method;
        case 'setter':
            return api_1.SymbolKind.Method;
        case 'property':
            return api_1.SymbolKind.Property;
        case 'constructor':
            return api_1.SymbolKind.Constructor;
        case 'parameter':
            return api_1.SymbolKind.Variable;
        case 'type parameter':
            return api_1.SymbolKind.Variable;
        case 'alias':
            return api_1.SymbolKind.Variable;
        case 'let':
            return api_1.SymbolKind.Variable;
        case 'const':
            return api_1.SymbolKind.Constant;
        case 'JSX attribute':
            return api_1.SymbolKind.Property;
        default:
            return api_1.SymbolKind.Variable;
    }
}
exports.symbolKindFromString = symbolKindFromString;
//# sourceMappingURL=utils.js.map
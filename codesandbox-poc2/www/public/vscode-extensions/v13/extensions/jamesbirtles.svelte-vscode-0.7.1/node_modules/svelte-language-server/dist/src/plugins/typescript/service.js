"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var DocumentSnapshot_1 = require("./DocumentSnapshot");
var utils_1 = require("./utils");
var path_1 = require("path");
var services = new Map();
function getLanguageServiceForDocument(document, createDocument) {
    var searchDir = path_1.dirname(document.getFilePath());
    var tsconfigPath = typescript_1.default.findConfigFile(searchDir, typescript_1.default.sys.fileExists, 'tsconfig.json') ||
        typescript_1.default.findConfigFile(searchDir, typescript_1.default.sys.fileExists, 'jsconfig.json') ||
        '';
    var service;
    if (services.has(tsconfigPath)) {
        service = services.get(tsconfigPath);
    }
    else {
        service = createLanguageService(tsconfigPath, createDocument);
        services.set(tsconfigPath, service);
    }
    return service.updateDocument(document);
}
exports.getLanguageServiceForDocument = getLanguageServiceForDocument;
function createLanguageService(tsconfigPath, createDocument) {
    var workspacePath = tsconfigPath ? path_1.dirname(tsconfigPath) : '';
    var documents = new Map();
    var compilerOptions = {
        allowNonTsExtensions: true,
        target: typescript_1.default.ScriptTarget.Latest,
        module: typescript_1.default.ModuleKind.ESNext,
        moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
        allowJs: true,
    };
    var configJson = tsconfigPath && typescript_1.default.readConfigFile(tsconfigPath, typescript_1.default.sys.readFile).config;
    var files = [];
    if (configJson) {
        var parsedConfig = typescript_1.default.parseJsonConfigFileContent(configJson, typescript_1.default.sys, workspacePath, compilerOptions, tsconfigPath, undefined, [
            { extension: 'html', isMixedContent: true },
            { extension: 'svelte', isMixedContent: true },
        ]);
        files = parsedConfig.fileNames;
        compilerOptions = __assign({}, compilerOptions, parsedConfig.options);
    }
    var host = {
        getCompilationSettings: function () { return compilerOptions; },
        getScriptFileNames: function () { return Array.from(new Set(files.concat(Array.from(documents.keys())))); },
        getScriptVersion: function (fileName) {
            var doc = getSvelteSnapshot(fileName);
            return doc ? String(doc.version) : '0';
        },
        getScriptSnapshot: function (fileName) {
            var doc = getSvelteSnapshot(fileName);
            if (doc) {
                return doc;
            }
            return typescript_1.default.ScriptSnapshot.fromString(typescript_1.default.sys.readFile(fileName) || '');
        },
        getCurrentDirectory: function () { return workspacePath; },
        getDefaultLibFileName: typescript_1.default.getDefaultLibFilePath,
        resolveModuleNames: function (moduleNames, containingFile) {
            return moduleNames.map(function (name) {
                var resolved = typescript_1.default.resolveModuleName(name, containingFile, compilerOptions, typescript_1.default.sys);
                if (!resolved.resolvedModule && utils_1.isSvelte(name)) {
                    return {
                        resolvedFileName: path_1.resolve(path_1.dirname(containingFile), name),
                        extension: path_1.extname(name),
                    };
                }
                return resolved.resolvedModule;
            });
        },
        readFile: function (path, encoding) {
            return typescript_1.default.sys.readFile(path, encoding);
        },
    };
    var languageService = typescript_1.default.createLanguageService(host);
    return {
        getService: function () { return languageService; },
        updateDocument: updateDocument,
    };
    function updateDocument(document) {
        var preSnapshot = documents.get(document.getFilePath());
        var newSnapshot = DocumentSnapshot_1.DocumentSnapshot.fromDocument(document);
        if (preSnapshot && preSnapshot.scriptKind !== newSnapshot.scriptKind) {
            // Restart language service as it doesn't handle script kind changes.
            languageService.dispose();
            languageService = typescript_1.default.createLanguageService(host);
        }
        documents.set(document.getFilePath(), newSnapshot);
        return languageService;
    }
    function getSvelteSnapshot(fileName) {
        var doc = documents.get(fileName);
        if (doc) {
            return doc;
        }
        if (utils_1.isSvelte(fileName)) {
            var doc_1 = DocumentSnapshot_1.DocumentSnapshot.fromDocument(createDocument(fileName, typescript_1.default.sys.readFile(fileName) || ''));
            documents.set(fileName, doc_1);
            return doc_1;
        }
    }
}
exports.createLanguageService = createLanguageService;
//# sourceMappingURL=service.js.map
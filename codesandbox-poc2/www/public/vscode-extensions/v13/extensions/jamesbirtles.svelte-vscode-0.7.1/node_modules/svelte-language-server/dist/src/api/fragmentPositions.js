"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var interfaces_1 = require("./interfaces");
function mapRangeToParent(fragment, range) {
    return interfaces_1.Range.create(fragment.positionInParent(range.start), fragment.positionInParent(range.end));
}
exports.mapRangeToParent = mapRangeToParent;
function mapRangeToFragment(fragment, range) {
    return interfaces_1.Range.create(fragment.positionInFragment(range.start), fragment.positionInFragment(range.end));
}
exports.mapRangeToFragment = mapRangeToFragment;
function mapTextEditToParent(fragment, edit) {
    return __assign({}, edit, { range: mapRangeToParent(fragment, edit.range) });
}
exports.mapTextEditToParent = mapTextEditToParent;
function mapLocationToParent(fragment, loc) {
    return __assign({}, loc, { range: mapRangeToParent(fragment, loc.range) });
}
exports.mapLocationToParent = mapLocationToParent;
function mapCompletionItemToParent(fragment, item) {
    if (!item.textEdit) {
        return item;
    }
    return __assign({}, item, { textEdit: mapTextEditToParent(fragment, item.textEdit) });
}
exports.mapCompletionItemToParent = mapCompletionItemToParent;
function mapHoverToParent(fragment, hover) {
    if (!hover.range) {
        return hover;
    }
    return __assign({}, hover, { range: mapRangeToParent(fragment, hover.range) });
}
exports.mapHoverToParent = mapHoverToParent;
function mapDiagnosticToParent(fragment, diagnostic) {
    return __assign({}, diagnostic, { range: mapRangeToParent(fragment, diagnostic.range) });
}
exports.mapDiagnosticToParent = mapDiagnosticToParent;
function mapColorInformationToParent(fragment, info) {
    return __assign({}, info, { range: mapRangeToParent(fragment, info.range) });
}
exports.mapColorInformationToParent = mapColorInformationToParent;
function mapColorPresentationToParent(fragment, presentation) {
    var item = __assign({}, presentation);
    if (item.textEdit) {
        item.textEdit = mapTextEditToParent(fragment, item.textEdit);
    }
    if (item.additionalTextEdits) {
        item.additionalTextEdits = item.additionalTextEdits.map(function (edit) {
            return mapTextEditToParent(fragment, edit);
        });
    }
    return item;
}
exports.mapColorPresentationToParent = mapColorPresentationToParent;
function mapSymbolInformationToParent(fragment, info) {
    return __assign({}, info, { location: mapLocationToParent(fragment, info.location) });
}
exports.mapSymbolInformationToParent = mapSymbolInformationToParent;
//# sourceMappingURL=fragmentPositions.js.map
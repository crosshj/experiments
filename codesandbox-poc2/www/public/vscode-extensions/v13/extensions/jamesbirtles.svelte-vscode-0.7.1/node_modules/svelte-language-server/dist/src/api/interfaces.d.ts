import { Diagnostic, DiagnosticSeverity, Position, Range, Hover, MarkupContent, MarkedString, CompletionItem, CompletionItemKind, TextEdit, InsertTextFormat, Command, CompletionList, TextDocumentItem, ColorInformation, ColorPresentation, Color, SymbolInformation, Location, SymbolKind } from 'vscode-languageserver-types';
import { Document } from './Document';
export { Diagnostic, DiagnosticSeverity, Position, Range, Hover, MarkupContent, MarkedString, CompletionItem, CompletionItemKind, TextEdit, InsertTextFormat, Command, CompletionList, TextDocumentItem, ColorInformation, ColorPresentation, Color, SymbolInformation, Location, SymbolKind, };
export declare type Resolvable<T> = T | Promise<T>;
export interface DiagnosticsProvider {
    getDiagnostics(document: Document): Resolvable<Diagnostic[]>;
}
export declare namespace DiagnosticsProvider {
    function is(obj: any): obj is DiagnosticsProvider;
}
export interface HoverProvider {
    doHover(document: Document, position: Position): Resolvable<Hover | null>;
}
export declare namespace HoverProvider {
    function is(obj: any): obj is HoverProvider;
}
export interface CompletionsProvider {
    getCompletions(document: Document, position: Position): Resolvable<CompletionItem[]>;
}
export declare namespace CompletionsProvider {
    function is(obj: any): obj is CompletionsProvider;
}
export interface FormattingProvider {
    formatDocument(document: Document): Resolvable<TextEdit[]>;
}
export declare namespace FormattingProvider {
    function is(obj: any): obj is FormattingProvider;
}
export interface TagCompleteProvider {
    doTagComplete(document: Document, positon: Position): Resolvable<string | null>;
}
export declare namespace TagCompleteProvider {
    function is(obj: any): obj is TagCompleteProvider;
}
export interface DocumentColorsProvider {
    getDocumentColors(document: Document): Resolvable<ColorInformation[]>;
}
export declare namespace DocumentColorsProvider {
    function is(obj: any): obj is DocumentColorsProvider;
}
export interface ColorPresentationsProvider {
    getColorPresentations(document: Document, range: Range, color: Color): Resolvable<ColorPresentation[]>;
}
export declare namespace ColorPresentationsProvider {
    function is(obj: any): obj is ColorPresentationsProvider;
}
export interface DocumentSymbolsProvider {
    getDocumentSymbols(document: Document): Resolvable<SymbolInformation[]>;
}
export declare namespace DocumentSymbolsProvider {
    function is(obj: any): obj is DocumentSymbolsProvider;
}
export interface Fragment extends Document {
    details: FragmentDetails;
    /**
     * Get the fragment offset relative to the parent
     * @param offset Offset in fragment
     */
    offsetInParent(offset: number): number;
    /**
     * Get the fragment position relative to the parent
     * @param pos Position in fragment
     */
    positionInParent(pos: Position): Position;
    /**
     * Get the offset relative to the start of the fragment
     * @param offset Offset in parent
     */
    offsetInFragment(offset: number): number;
    /**
     * Get the position relative to the start of the fragment
     * @param pos Position in parent
     */
    positionInFragment(pos: Position): Position;
    /**
     * Returns true if the given parent position is inside of this fragment
     * @param pos Position in parent
     */
    isInFragment(pos: Position): boolean;
}
export interface FragmentDetails {
    start: number;
    end: number;
    container?: {
        start: number;
        end: number;
    };
    attributes: Record<string, string>;
}
export declare type FragmentPredicate = (fragment: Fragment) => boolean;
export interface Plugin {
    pluginId: string;
    defaultConfig: any;
}

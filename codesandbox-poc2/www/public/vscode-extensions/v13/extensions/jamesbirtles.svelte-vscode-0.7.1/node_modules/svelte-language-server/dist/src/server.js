"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var DocumentManager_1 = require("./lib/documents/DocumentManager");
var SvelteDocument_1 = require("./lib/documents/SvelteDocument");
var SveltePlugin_1 = require("./plugins/SveltePlugin");
var HTMLPlugin_1 = require("./plugins/HTMLPlugin");
var CSSPlugin_1 = require("./plugins/CSSPlugin");
var wrapFragmentPlugin_1 = require("./api/wrapFragmentPlugin");
var TypeScriptPlugin_1 = require("./plugins/TypeScriptPlugin");
var lodash_1 = require("lodash");
var TagCloseRequest;
(function (TagCloseRequest) {
    TagCloseRequest.type = new vscode_languageserver_1.RequestType('html/tag');
})(TagCloseRequest || (TagCloseRequest = {}));
function startServer() {
    var _this = this;
    var connection = vscode_languageserver_1.createConnection(new vscode_languageserver_1.IPCMessageReader(process), new vscode_languageserver_1.IPCMessageWriter(process));
    var manager = new DocumentManager_1.DocumentManager(function (textDocument) { return new SvelteDocument_1.SvelteDocument(textDocument.uri, textDocument.text); });
    manager.register(new SveltePlugin_1.SveltePlugin());
    manager.register(new HTMLPlugin_1.HTMLPlugin());
    manager.register(wrapFragmentPlugin_1.wrapFragmentPlugin(new CSSPlugin_1.CSSPlugin(), CSSPlugin_1.CSSPlugin.matchFragment));
    manager.register(wrapFragmentPlugin_1.wrapFragmentPlugin(new TypeScriptPlugin_1.TypeScriptPlugin(), TypeScriptPlugin_1.TypeScriptPlugin.matchFragment));
    connection.onInitialize(function (evt) {
        return {
            capabilities: {
                textDocumentSync: {
                    openClose: true,
                    change: vscode_languageserver_1.TextDocumentSyncKind.Incremental,
                },
                hoverProvider: manager.supports('doHover'),
                completionProvider: {
                    triggerCharacters: ['<'],
                },
                documentFormattingProvider: true,
                colorProvider: true,
                documentSymbolProvider: true,
            },
        };
    });
    connection.onDidChangeConfiguration(function (_a) {
        var settings = _a.settings;
        lodash_1.set(settings.svelte, 'plugin.html.format.settings', lodash_1.get(settings, 'html.format', {}));
        manager.updateConfig(settings.svelte);
    });
    connection.onDidOpenTextDocument(function (evt) { return manager.openDocument(evt.textDocument); });
    connection.onDidCloseTextDocument(function (evt) { return manager.closeDocument(evt.textDocument); });
    connection.onDidChangeTextDocument(function (evt) {
        return manager.updateDocument(evt.textDocument, evt.contentChanges);
    });
    connection.onHover(function (evt) { return manager.doHover(evt.textDocument, evt.position); });
    connection.onCompletion(function (evt) { return manager.getCompletions(evt.textDocument, evt.position); });
    connection.onDocumentFormatting(function (evt) { return manager.formatDocument(evt.textDocument); });
    connection.onRequest(TagCloseRequest.type, function (evt) {
        return manager.doTagComplete(evt.textDocument, evt.position);
    });
    connection.onDocumentColor(function (evt) { return manager.getDocumentColors(evt.textDocument); });
    connection.onColorPresentation(function (evt) {
        return manager.getColorPresentations(evt.textDocument, evt.range, evt.color);
    });
    connection.onDocumentSymbol(function (evt) { return manager.getDocumentSymbols(evt.textDocument); });
    manager.on('documentChange', function (document) { return __awaiter(_this, void 0, void 0, function () {
        var diagnostics;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, manager.getDiagnostics({ uri: document.getURL() })];
                case 1:
                    diagnostics = _a.sent();
                    connection.sendDiagnostics({
                        uri: document.getURL(),
                        diagnostics: diagnostics,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    connection.listen();
}
exports.startServer = startServer;
//# sourceMappingURL=server.js.map